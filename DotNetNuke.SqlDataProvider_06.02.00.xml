<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<root file="DotNetNuke.SqlDataProvider.dll" version="06.02.00" generated="2017-06-18 21:56:59Z" generationTime="5.5924833">
  <namespace name="DotNetNuke.Data">
    <class name="SqlDataProvider">
      <declaration><![CDATA[public class SqlDataProvider : DataProvider]]></declaration>
      <documentation>
      </documentation>
      <constructors>
        <constructor name=".ctor">
          <declaration><![CDATA[public SqlDataProvider() : this(true)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="58" sc="9" el="61" ec="10">SqlDataProvider.cs</location>
            <body hash="064276cf239c9b13f4c4f6585cfa26d8"><![CDATA[public SqlDataProvider()
            : this(true)
        {
        }]]></body>
          </codeblock>
        </constructor>
        <constructor name=".ctor">
          <declaration><![CDATA[private string _scriptDelimiterRegex = "(?<=(?:[^\\w]+|^))GO(?=(?: |\\t)*?(?:\\r?\\n|$))";]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="56" sc="9" el="102" ec="10">SqlDataProvider.cs</location>
            <body hash="d92cc864d92dcce8945b9a582aa3514e"><![CDATA[private string _scriptDelimiterRegex = "(?<=(?:[^\\w]+|^))GO(?=(?: |\\t)*?(?:\\r?\\n|$))";

        public SqlDataProvider()
            : this(true)
        {
        }

        public SqlDataProvider(bool useConfig)
        {
            _providerName = Settings["providerName"];
            _providerPath = Settings["providerPath"];
            if (useConfig)
            {
                //Get Connection string from web.config
                _connectionString = Config.GetConnectionString();
            }
            if (string.IsNullOrEmpty(_connectionString))
            {
                //Use connection string specified in provider
                _connectionString = Settings["connectionString"];
            }
            _objectQualifier = Settings["objectQualifier"];
            if (!string.IsNullOrEmpty(_objectQualifier) && _objectQualifier.EndsWith("_") == false)
            {
                _objectQualifier += "_";
            }
            _databaseOwner = Settings["databaseOwner"];
            if (!string.IsNullOrEmpty(_databaseOwner) && _databaseOwner.EndsWith(".") == false)
            {
                _databaseOwner += ".";
            }
            _coreConnectionString = _connectionString;
            if (!_coreConnectionString.EndsWith(";"))
            {
                _coreConnectionString += ";";
            }
            _coreConnectionString += "Application Name=DNNCore;";
            if (!String.IsNullOrEmpty(Settings["upgradeConnectionString"]))
            {
                _upgradeConnectionString = Settings["upgradeConnectionString"];
            }
            else
            {
                _upgradeConnectionString = _coreConnectionString;
            }
            _isConnectionValid = CanConnect(ConnectionString, DatabaseOwner, ObjectQualifier);
        }]]></body>
          </codeblock>
        </constructor>
      </constructors>
      <methods>
        <method name="AddAffiliate">
          <declaration><![CDATA[public override int AddAffiliate(int VendorId, DateTime StartDate, DateTime EndDate, double CPC, double CPA)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2164" sc="9" el="2166" ec="10">SqlDataProvider.cs</location>
            <body hash="3fc1b42eb27db3c0ae288a8f0e473bde"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddAffiliate", VendorId, GetNull(StartDate), GetNull(EndDate), CPC, CPA));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddAuthentication">
          <declaration><![CDATA[public override int AddAuthentication(int packageID, string authenticationType, bool isEnabled, string settingsControlSrc, string loginControlSrc, string logoffControlSrc, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2985" sc="9" el="2996" ec="10">SqlDataProvider.cs</location>
            <body hash="c904435a1a595b97d7ba26514ffa0805"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddAuthentication",
                                                        packageID,
                                                        authenticationType,
                                                        isEnabled,
                                                        settingsControlSrc,
                                                        loginControlSrc,
                                                        logoffControlSrc,
                                                        CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddBanner">
          <declaration><![CDATA[public override int AddBanner(string BannerName, int VendorId, string ImageFile, string URL, int Impressions, double CPM, DateTime StartDate, DateTime EndDate, string UserName, int BannerTypeId, string Description, string GroupName, int Criteria, int Width, int Height)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2090" sc="9" el="2109" ec="10">SqlDataProvider.cs</location>
            <body hash="27d8a35cd4f529b310cb7b07892929cd"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddBanner",
                                                        BannerName,
                                                        VendorId,
                                                        GetNull(ImageFile),
                                                        GetNull(URL),
                                                        Impressions,
                                                        CPM,
                                                        GetNull(StartDate),
                                                        GetNull(EndDate),
                                                        UserName,
                                                        BannerTypeId,
                                                        GetNull(Description),
                                                        GetNull(GroupName),
                                                        Criteria,
                                                        Width,
                                                        Height));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddDefaultFolderTypes">
          <declaration><![CDATA[public override void AddDefaultFolderTypes(int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3277" sc="9" el="3279" ec="10">SqlDataProvider.cs</location>
            <body hash="b712574050be750e7331b3af83cefb3b"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddDefaultFolderTypes", portalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddDesktopModule">
          <declaration><![CDATA[public override int AddDesktopModule(int packageID, string moduleName, string folderName, string friendlyName, string description, string version, bool isPremium, bool isAdmin, string businessControllerClass, int supportedFeatures, string compatibleVersions, string dependencies, string permissions, int contentItemId, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1623" sc="9" el="1642" ec="10">SqlDataProvider.cs</location>
            <body hash="d610d8d5599fef58ac366d47e08fbf28"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddDesktopModule",
                                                        packageID,
                                                        moduleName,
                                                        folderName,
                                                        friendlyName,
                                                        GetNull(description),
                                                        GetNull(version),
                                                        isPremium,
                                                        isAdmin,
                                                        businessControllerClass,
                                                        supportedFeatures,
                                                        GetNull(compatibleVersions),
                                                        GetNull(dependencies),
                                                        GetNull(permissions),
                                                        contentItemId,
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddDesktopModulePermission">
          <declaration><![CDATA[public override int AddDesktopModulePermission(int portalDesktopModuleID, int permissionID, int roleID, bool allowAccess, int userID, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2580" sc="9" el="2590" ec="10">SqlDataProvider.cs</location>
            <body hash="0cab4cc4a1847976cd6813cf2a1744b2"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddDesktopModulePermission",
                                                        portalDesktopModuleID,
                                                        permissionID,
                                                        GetRoleNull(roleID),
                                                        allowAccess,
                                                        GetNull(userID),
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddEventMessage">
          <declaration><![CDATA[public override int AddEventMessage(string eventName, int priority, string processorType, string processorCommand, string body, string sender, string subscriberId, string authorizedRoles, string exceptionMessage, DateTime sentDate, DateTime expirationDate, string attributes)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2952" sc="9" el="2967" ec="10">SqlDataProvider.cs</location>
            <body hash="62fb4e2badd8de591921f90fb7471985"><![CDATA[{
            return SqlHelper.ExecuteNonQuery(ConnectionString,
                                             DatabaseOwner + ObjectQualifier + "AddEventMessage",
                                             eventName,
                                             priority,
                                             processorType,
                                             processorCommand,
                                             body,
                                             sender,
                                             subscriberId,
                                             authorizedRoles,
                                             exceptionMessage,
                                             sentDate,
                                             expirationDate,
                                             attributes);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddFile">
          <declaration><![CDATA[public override int AddFile(int PortalId, Guid UniqueId, Guid VersionGuid, string FileName, string Extension, long Size, int Width, int Height, string ContentType, string Folder, int FolderID, int createdByUserID, string hash)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1868" sc="9" el="1885" ec="10">SqlDataProvider.cs</location>
            <body hash="1fa812436499d4eeb758d66eb905bf22"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddFile",
                                                        GetNull(PortalId),
                                                        UniqueId,
                                                        VersionGuid,
                                                        FileName,
                                                        Extension,
                                                        Size,
                                                        GetNull(Width),
                                                        GetNull(Height),
                                                        ContentType,
                                                        Folder,
                                                        FolderID,
                                                        createdByUserID,
                                                        hash));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddFolder">
          <declaration><![CDATA[public override int AddFolder(int PortalID, Guid UniqueId, Guid VersionGuid, string FolderPath, int StorageLocation, bool IsProtected, bool IsCached, DateTime LastUpdated, int createdByUserID, int folderMappingID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2632" sc="9" el="2646" ec="10">SqlDataProvider.cs</location>
            <body hash="432383e8706a6c33da959bbd48663c70"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddFolder",
                                                        GetNull(PortalID),
                                                        UniqueId,
                                                        VersionGuid,
                                                        FolderPath,
                                                        StorageLocation,
                                                        IsProtected,
                                                        IsCached,
                                                        GetNull(LastUpdated),
                                                        createdByUserID,
                                                        folderMappingID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddFolderMapping">
          <declaration><![CDATA[public override int AddFolderMapping(int portalID, string mappingName, string folderProviderType, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3226" sc="9" el="3229" ec="10">SqlDataProvider.cs</location>
            <body hash="89f66a7ca3914df91ffe06cd3e00ebd6"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddFolderMapping", GetNull(portalID), mappingName, folderProviderType, createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddFolderMappingSetting">
          <declaration><![CDATA[public override void AddFolderMappingSetting(int folderMappingID, string settingName, string settingValue, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3232" sc="9" el="3234" ec="10">SqlDataProvider.cs</location>
            <body hash="db6d8ae783e95d70140ca9a0dfa6b4d4"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddFolderMappingsSetting", folderMappingID, settingName, settingValue, createdByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddFolderPermission">
          <declaration><![CDATA[public override int AddFolderPermission(int FolderID, int PermissionID, int roleID, bool AllowAccess, int UserID, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2705" sc="9" el="2715" ec="10">SqlDataProvider.cs</location>
            <body hash="fde2f424bc446aee5f54fcba26967bdc"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddFolderPermission",
                                                        FolderID,
                                                        PermissionID,
                                                        GetRoleNull(roleID),
                                                        AllowAccess,
                                                        GetNull(UserID),
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddHostSetting">
          <declaration><![CDATA[public override void AddHostSetting(string SettingName, string SettingValue, bool SettingIsSecure, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="874" sc="9" el="876" ec="10">SqlDataProvider.cs</location>
            <body hash="81f74dbb4eb3740e967a160387b25f23"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddHostSetting", SettingName, SettingValue, SettingIsSecure, CreatedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddLanguage">
          <declaration><![CDATA[public override int AddLanguage(string cultureCode, string cultureName, string fallbackCulture, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3149" sc="9" el="3151" ec="10">SqlDataProvider.cs</location>
            <body hash="212f636c176fac66cb5d8139f25125c2"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddLanguage", cultureCode, cultureName, fallbackCulture, CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddLanguagePack">
          <declaration><![CDATA[public override int AddLanguagePack(int packageID, int languageID, int dependentPackageID, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3189" sc="9" el="3191" ec="10">SqlDataProvider.cs</location>
            <body hash="6d8842de95883576e69c5e18a13b6d41"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddLanguagePack", packageID, languageID, dependentPackageID, CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddListEntry">
          <declaration><![CDATA[public override int AddListEntry(string ListName, string Value, string Text, int ParentID, int Level, bool EnableSortOrder, int DefinitionID, string Description, int PortalID, bool SystemList, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2868" sc="9" el="2883" ec="10">SqlDataProvider.cs</location>
            <body hash="afb723d110831273c733e4c3324c8c26"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddListEntry",
                                                        ListName,
                                                        Value,
                                                        Text,
                                                        ParentID,
                                                        Level,
                                                        EnableSortOrder,
                                                        DefinitionID,
                                                        Description,
                                                        PortalID,
                                                        SystemList,
                                                        CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModule">
          <declaration><![CDATA[public override int AddModule(int ContentItemID, int PortalID, int ModuleDefID, bool AllTabs, DateTime StartDate, DateTime EndDate, bool InheritViewPermissions, bool IsDeleted, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1371" sc="9" el="1384" ec="10">SqlDataProvider.cs</location>
            <body hash="8283d11c29f65a58513ddaabda067caa"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddModule",
                                                        ContentItemID,
                                                        GetNull(PortalID),
                                                        ModuleDefID,
                                                        AllTabs,
                                                        GetNull(StartDate),
                                                        GetNull(EndDate),
                                                        InheritViewPermissions,
                                                        IsDeleted,
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModuleControl">
          <declaration><![CDATA[public override int AddModuleControl(int ModuleDefId, string ControlKey, string ControlTitle, string ControlSrc, string IconFile, int ControlType, int ViewOrder, string HelpUrl, bool SupportsPartialRendering, bool SupportsPopUps, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1745" sc="9" el="1760" ec="10">SqlDataProvider.cs</location>
            <body hash="ddc5328088961e92a1a9ad631d546c6e"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddModuleControl",
                                                        GetNull(ModuleDefId),
                                                        GetNull(ControlKey),
                                                        GetNull(ControlTitle),
                                                        ControlSrc,
                                                        GetNull(IconFile),
                                                        ControlType,
                                                        GetNull(ViewOrder),
                                                        GetNull(HelpUrl),
                                                        SupportsPartialRendering,
                                                        SupportsPopUps,
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModuleDefinition">
          <declaration><![CDATA[public override int AddModuleDefinition(int DesktopModuleId, string FriendlyName, int DefaultCacheTime, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1703" sc="9" el="1705" ec="10">SqlDataProvider.cs</location>
            <body hash="462a3efcee55403d92a906b84e47ea0c"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddModuleDefinition", DesktopModuleId, FriendlyName, DefaultCacheTime, createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModulePermission">
          <declaration><![CDATA[public override int AddModulePermission(int moduleID, int PermissionID, int roleID, bool AllowAccess, int UserID, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2473" sc="9" el="2483" ec="10">SqlDataProvider.cs</location>
            <body hash="bd261fd28169390cec5ee60243df606b"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddModulePermission",
                                                        moduleID,
                                                        PermissionID,
                                                        GetRoleNull(roleID),
                                                        AllowAccess,
                                                        GetNull(UserID),
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddModuleSetting">
          <declaration><![CDATA[public override void AddModuleSetting(int ModuleId, string SettingName, string SettingValue, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1540" sc="9" el="1542" ec="10">SqlDataProvider.cs</location>
            <body hash="2f43c6ba123a61b40d3ab571b1429535"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddModuleSetting", ModuleId, SettingName, SettingValue, createdByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddPackage">
          <declaration><![CDATA[public override int AddPackage(int portalID, string name, string friendlyName, string description, string type, string version, string license, string manifest, string owner, string organization, string url, string email, string releaseNotes, bool isSystemPackage, int createdByUserID, string folderName, string iconFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3051" sc="9" el="3072" ec="10">SqlDataProvider.cs</location>
            <body hash="a441d6a8be2f8ab966a52ce211ea9b22"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddPackage",
                                                        GetNull(portalID),
                                                        name,
                                                        friendlyName,
                                                        description,
                                                        type,
                                                        version,
                                                        license,
                                                        manifest,
                                                        owner,
                                                        organization,
                                                        url,
                                                        email,
                                                        releaseNotes,
                                                        isSystemPackage,
                                                        createdByUserID,
                                                        folderName,
                                                        iconFile));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddPermission">
          <declaration><![CDATA[public override int AddPermission(string permissionCode, int moduleDefID, string permissionKey, string permissionName, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2420" sc="9" el="2423" ec="10">SqlDataProvider.cs</location>
            <body hash="5fdc655709373f883f89ea6666169882"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddPermission", moduleDefID, permissionCode, permissionKey, permissionName, createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddPortalAlias">
          <declaration><![CDATA[public override int AddPortalAlias(int PortalID, string HTTPAlias, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2931" sc="9" el="2933" ec="10">SqlDataProvider.cs</location>
            <body hash="f799c40d6e0826f9087d7ea1c51b73b8"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddPortalAlias", PortalID, HTTPAlias, createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddPortalDesktopModule">
          <declaration><![CDATA[public override int AddPortalDesktopModule(int PortalId, int DesktopModuleId, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1687" sc="9" el="1689" ec="10">SqlDataProvider.cs</location>
            <body hash="c2e742b2cceec30b3cbe8d5f48433c4b"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddPortalDesktopModule", PortalId, DesktopModuleId, createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddPortalInfo">
          <declaration><![CDATA[public override int AddPortalInfo(string portalname, string currency, string firstname, string lastname, string username, string password, string email, DateTime expirydate, double hostfee, double hostspace, int pagequota, int userquota, int siteloghistory, string homedirectory, int createdbyuserid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="911" sc="9" el="925" ec="10">SqlDataProvider.cs</location>
            <body hash="3de3cb7f4ed52c540e3092ad1891bae5"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "addportalinfo",
                                                        portalname,
                                                        currency,
                                                        GetNull(expirydate),
                                                        hostfee,
                                                        hostspace,
                                                        pagequota,
                                                        userquota,
                                                        GetNull(siteloghistory),
                                                        homedirectory,
                                                        createdbyuserid));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddPortalLanguage">
          <declaration><![CDATA[public override int AddPortalLanguage(int portalID, int languageID, bool IsPublished, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3169" sc="9" el="3171" ec="10">SqlDataProvider.cs</location>
            <body hash="4a2037bd1e8f5210ab7d5cbc23caef6f"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddPortalLanguage", portalID, languageID, IsPublished, CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddProfile">
          <declaration><![CDATA[public override void AddProfile(int UserId, int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2234" sc="9" el="2236" ec="10">SqlDataProvider.cs</location>
            <body hash="ec1d6c2f427f71c56b2d496ba3b4d45c"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddProfile", UserId, PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddPropertyDefinition">
          <declaration><![CDATA[public override int AddPropertyDefinition(int PortalId, int ModuleDefId, int DataType, string DefaultValue, string PropertyCategory, string PropertyName, bool ReadOnly, bool Required, string ValidationExpression, int ViewOrder, bool Visible, int Length, int DefaultVisibility, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2247" sc="9" el="2281" ec="10">SqlDataProvider.cs</location>
            <body hash="5e9640e2d58138886cce311e870add19"><![CDATA[{
            int retValue;
            try
            {
                retValue =
                    Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                            DatabaseOwner + ObjectQualifier + "AddPropertyDefinition",
                                                            GetNull(PortalId),
                                                            ModuleDefId,
                                                            DataType,
                                                            DefaultValue,
                                                            PropertyCategory,
                                                            PropertyName,
                                                            ReadOnly,
                                                            Required,
                                                            ValidationExpression,
                                                            ViewOrder,
                                                            Visible,
                                                            Length,
                                                            DefaultVisibility,
                                                            CreatedByUserID));
            }
            catch (SqlException ex)
            {
                DnnLog.Debug(ex);

                //If not a duplicate (throw an Exception)
                retValue = -ex.Number;
                if (ex.Number != 2601)
                {
                    throw ex;
                }
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSearchItem">
          <declaration><![CDATA[public override int AddSearchItem(string Title, string Description, int Author, DateTime PubDate, int ModuleId, string Key, string Guid, int ImageFileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2756" sc="9" el="2768" ec="10">SqlDataProvider.cs</location>
            <body hash="3a1bc70bcd9795d0f00a36ca8edbe034"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddSearchItem",
                                                        Title,
                                                        Description,
                                                        GetNull(Author),
                                                        GetNull(PubDate),
                                                        ModuleId,
                                                        Key,
                                                        Guid,
                                                        ImageFileId));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSearchItemWord">
          <declaration><![CDATA[public override int AddSearchItemWord(int SearchItemId, int SearchWordsID, int Occurrences)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2796" sc="9" el="2798" ec="10">SqlDataProvider.cs</location>
            <body hash="ed20ed6e743d23278a4449a3fe25e9e2"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddSearchItemWord", SearchItemId, SearchWordsID, Occurrences));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSearchItemWordPosition">
          <declaration><![CDATA[public override void AddSearchItemWordPosition(int SearchItemWordID, string ContentPositions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2801" sc="9" el="2803" ec="10">SqlDataProvider.cs</location>
            <body hash="2e1d9c10462fca54df2cb0a1daac688d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddSearchItemWordPosition", SearchItemWordID, ContentPositions);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSearchWord">
          <declaration><![CDATA[public override int AddSearchWord(string Word)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2791" sc="9" el="2793" ec="10">SqlDataProvider.cs</location>
            <body hash="41c108d9955fca3da87ba4b0c0ba22c2"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddSearchWord", Word));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSiteLog">
          <declaration><![CDATA[public override void AddSiteLog(DateTime DateTime, int PortalId, int UserId, string Referrer, string URL, string UserAgent, string UserHostAddress, string UserHostName, int TabId, int AffiliateId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1929" sc="9" el="1942" ec="10">SqlDataProvider.cs</location>
            <body hash="747fe3c30393d212f70131891cd5a8ae"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "AddSiteLog",
                                      DateTime,
                                      PortalId,
                                      GetNull(UserId),
                                      GetNull(Referrer),
                                      GetNull(URL),
                                      GetNull(UserAgent),
                                      GetNull(UserHostAddress),
                                      GetNull(UserHostName),
                                      GetNull(TabId),
                                      GetNull(AffiliateId));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSkin">
          <declaration><![CDATA[public override int AddSkin(int skinPackageID, string skinSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2184" sc="9" el="2186" ec="10">SqlDataProvider.cs</location>
            <body hash="f35b5e36e27c4d0fe0c1de9d5813db76"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddSkin", skinPackageID, skinSrc));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSkinControl">
          <declaration><![CDATA[public override int AddSkinControl(int packageID, string ControlKey, string ControlSrc, bool SupportsPartialRendering, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1787" sc="9" el="1796" ec="10">SqlDataProvider.cs</location>
            <body hash="16a540a20061de011739c9fcbcb438a2"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddSkinControl",
                                                        GetNull(packageID),
                                                        GetNull(ControlKey),
                                                        ControlSrc,
                                                        SupportsPartialRendering,
                                                        CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddSkinPackage">
          <declaration><![CDATA[public override int AddSkinPackage(int packageID, int portalID, string skinName, string skinType, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2189" sc="9" el="2191" ec="10">SqlDataProvider.cs</location>
            <body hash="ee2b47f1c3cb1fa54deccfc09cca2bfb"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddSkinPackage", packageID, GetNull(portalID), skinName, skinType, CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTabAfter">
          <declaration><![CDATA[public override int AddTabAfter(TabInfo tab, int afterTabId, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1089" sc="9" el="1119" ec="10">SqlDataProvider.cs</location>
            <body hash="320e1ffcdf8e9e361c36fd5586859fbd"><![CDATA[{
            return ExecuteScalar<int>("AddTabAfter",
                                        afterTabId,
                                        tab.ContentItemId,
                                        GetNull(tab.PortalID),
                                        tab.UniqueId,
                                        tab.VersionGuid,
                                        GetNull(tab.DefaultLanguageGuid),
                                        tab.LocalizedVersionGuid,
                                        tab.TabName,
                                        tab.IsVisible,
                                        tab.DisableLink,
                                        GetNull(tab.ParentId),
                                        tab.IconFile,
                                        tab.IconFileLarge,
                                        tab.Title,
                                        tab.Description,
                                        tab.KeyWords,
                                        tab.Url,
                                        GetNull(tab.SkinSrc),
                                        GetNull(tab.ContainerSrc),
                                        GetNull(tab.StartDate),
                                        GetNull(tab.EndDate),
                                        GetNull(tab.RefreshInterval),
                                        GetNull(tab.PageHeadText),
                                        tab.IsSecure,
                                        tab.PermanentRedirect,
                                        tab.SiteMapPriority,
                                        createdByUserID,
                                        GetNull(tab.CultureCode));                    
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTabBefore">
          <declaration><![CDATA[public override int AddTabBefore(TabInfo tab, int beforeTabId, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1122" sc="9" el="1152" ec="10">SqlDataProvider.cs</location>
            <body hash="cd6794fc92636c90da3b97b18cc0ee69"><![CDATA[{
            return ExecuteScalar<int>("AddTabBefore",
                                        beforeTabId,
                                        tab.ContentItemId,
                                        GetNull(tab.PortalID),
                                        tab.UniqueId,
                                        tab.VersionGuid,
                                        GetNull(tab.DefaultLanguageGuid),
                                        tab.LocalizedVersionGuid,
                                        tab.TabName,
                                        tab.IsVisible,
                                        tab.DisableLink,
                                        GetNull(tab.ParentId),
                                        tab.IconFile,
                                        tab.IconFileLarge,
                                        tab.Title,
                                        tab.Description,
                                        tab.KeyWords,
                                        tab.Url,
                                        GetNull(tab.SkinSrc),
                                        GetNull(tab.ContainerSrc),
                                        GetNull(tab.StartDate),
                                        GetNull(tab.EndDate),
                                        GetNull(tab.RefreshInterval),
                                        GetNull(tab.PageHeadText),
                                        tab.IsSecure,
                                        tab.PermanentRedirect,
                                        tab.SiteMapPriority,
                                        createdByUserID,
                                        GetNull(tab.CultureCode));                 
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTabModule">
          <declaration><![CDATA[public override void AddTabModule(int TabId, int ModuleId, string ModuleTitle, string Header, string Footer, int ModuleOrder, string PaneName, int CacheTime, string CacheMethod, string Alignment, string Color, string Border, string IconFile, int Visibility, string ContainerSrc, bool DisplayTitle, bool DisplayPrint, bool DisplaySyndicate, bool IsWebSlice, string WebSliceTitle, DateTime WebSliceExpiryDate, int WebSliceTTL, Guid UniqueId, Guid VersionGuid, Guid DefaultLanguageGuid, Guid LocalizedVersionGuid, string CultureCode, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1419" sc="9" el="1450" ec="10">SqlDataProvider.cs</location>
            <body hash="983e3cc3aa63b8677faff06526786546"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "AddTabModule",
                                      TabId,
                                      ModuleId,
                                      ModuleTitle,
                                      GetNull(Header),
                                      GetNull(Footer),
                                      ModuleOrder,
                                      PaneName,
                                      CacheTime,
                                      GetNull(CacheMethod),
                                      GetNull(Alignment),
                                      GetNull(Color),
                                      GetNull(Border),
                                      GetNull(IconFile),
                                      Visibility,
                                      GetNull(ContainerSrc),
                                      DisplayTitle,
                                      DisplayPrint,
                                      DisplaySyndicate,
                                      IsWebSlice,
                                      WebSliceTitle,
                                      GetNull(WebSliceExpiryDate),
                                      WebSliceTTL,
                                      UniqueId,
                                      VersionGuid,
                                      GetNull(DefaultLanguageGuid),
                                      LocalizedVersionGuid,
                                      CultureCode,
                                      createdByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTabModuleSetting">
          <declaration><![CDATA[public override void AddTabModuleSetting(int TabModuleId, string SettingName, string SettingValue, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1600" sc="9" el="1602" ec="10">SqlDataProvider.cs</location>
            <body hash="0b9e52f00aff6ac390c1eede6badaf4a"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddTabModuleSetting", TabModuleId, SettingName, SettingValue, createdByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTabPermission">
          <declaration><![CDATA[public override int AddTabPermission(int TabID, int PermissionID, int roleID, bool AllowAccess, int UserID, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2524" sc="9" el="2534" ec="10">SqlDataProvider.cs</location>
            <body hash="7991351507d14e87aea2574f57630c60"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddTabPermission",
                                                        TabID,
                                                        PermissionID,
                                                        GetRoleNull(roleID),
                                                        AllowAccess,
                                                        GetNull(UserID),
                                                        createdByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTabSetting">
          <declaration><![CDATA[public override void AddTabSetting(int TabId, string SettingName, string SettingValue, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1575" sc="9" el="1577" ec="10">SqlDataProvider.cs</location>
            <body hash="999c7500053e857433174e796f88706c"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddTabSetting", TabId, SettingName, SettingValue, createdByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddTabToEnd">
          <declaration><![CDATA[public override int AddTabToEnd(TabInfo tab, int createdByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1155" sc="9" el="1184" ec="10">SqlDataProvider.cs</location>
            <body hash="b097aa315b993150812d940200fc17d4"><![CDATA[{
            return ExecuteScalar<int>("AddTabToEnd",
                                        tab.ContentItemId,
                                        GetNull(tab.PortalID),
                                        tab.UniqueId,
                                        tab.VersionGuid,
                                        GetNull(tab.DefaultLanguageGuid),
                                        tab.LocalizedVersionGuid,
                                        tab.TabName,
                                        tab.IsVisible,
                                        tab.DisableLink,
                                        GetNull(tab.ParentId),
                                        tab.IconFile,
                                        tab.IconFileLarge,
                                        tab.Title,
                                        tab.Description,
                                        tab.KeyWords,
                                        tab.Url,
                                        GetNull(tab.SkinSrc),
                                        GetNull(tab.ContainerSrc),
                                        GetNull(tab.StartDate),
                                        GetNull(tab.EndDate),
                                        GetNull(tab.RefreshInterval),
                                        GetNull(tab.PageHeadText),
                                        tab.IsSecure,
                                        tab.PermanentRedirect,
                                        tab.SiteMapPriority,
                                        createdByUserID,
                                        GetNull(tab.CultureCode));                 
        }]]></body>
          </codeblock>
        </method>
        <method name="AddUrl">
          <declaration><![CDATA[public override void AddUrl(int PortalID, string Url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2335" sc="9" el="2337" ec="10">SqlDataProvider.cs</location>
            <body hash="22ba7a74a703a2362c7e175c7fba12e0"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddUrl", PortalID, Url);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddUrlLog">
          <declaration><![CDATA[public override void AddUrlLog(int UrlTrackingID, int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2375" sc="9" el="2377" ec="10">SqlDataProvider.cs</location>
            <body hash="c96d00be452ef578426e81de8f519659"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddUrlLog", UrlTrackingID, GetNull(UserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddUrlTracking">
          <declaration><![CDATA[public override void AddUrlTracking(int PortalID, string Url, string UrlType, bool LogActivity, bool TrackClicks, int ModuleID, bool NewWindow)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2350" sc="9" el="2352" ec="10">SqlDataProvider.cs</location>
            <body hash="1dd4cf038f08f95d41d1db2624ea6ed0"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "AddUrlTracking", PortalID, Url, UrlType, LogActivity, TrackClicks, GetNull(ModuleID), NewWindow);
        }]]></body>
          </codeblock>
        </method>
        <method name="AddUserAuthentication">
          <declaration><![CDATA[public override int AddUserAuthentication(int userID, string authenticationType, string authenticationToken, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2999" sc="9" el="3002" ec="10">SqlDataProvider.cs</location>
            <body hash="dfa86282f4df95fecbfb1e727684a6d3"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddUserAuthentication", userID, authenticationType, authenticationToken, CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddVendor">
          <declaration><![CDATA[public override int AddVendor(int PortalId, string VendorName, string Unit, string Street, string City, string Region, string Country, string PostalCode, string Telephone, string Fax, string Cell, string Email, string Website, string FirstName, string LastName, string UserName, string LogoFile, string KeyWords, string Authorized)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1999" sc="9" el="2022" ec="10">SqlDataProvider.cs</location>
            <body hash="cc5323bbe51ce4375e7229b69763f2cc"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddVendor",
                                                        GetNull(PortalId),
                                                        VendorName,
                                                        Unit,
                                                        Street,
                                                        City,
                                                        Region,
                                                        Country,
                                                        PostalCode,
                                                        Telephone,
                                                        Fax,
                                                        Cell,
                                                        Email,
                                                        Website,
                                                        FirstName,
                                                        LastName,
                                                        UserName,
                                                        LogoFile,
                                                        KeyWords,
                                                        bool.Parse(Authorized)));
        }]]></body>
          </codeblock>
        </method>
        <method name="AddVendorClassification">
          <deprecation>Obsoleted in 6.0.0, the Vendor Classifications feature was never fully implemented and will be removed from the API</deprecation>
          <declaration><![CDATA[public override int AddVendorClassification(int VendorId, int ClassificationId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2064" sc="9" el="2066" ec="10">SqlDataProvider.cs</location>
            <body hash="ecbc382e68f5ec507392483b945713ad"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "AddVendorClassification", VendorId, ClassificationId));
        }]]></body>
          </codeblock>
        </method>
        <method name="CanConnect">
          <declaration><![CDATA[private bool CanConnect(string ConnectionString, string Owner, string Qualifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="362" sc="9" el="382" ec="10">SqlDataProvider.cs</location>
            <body hash="27389c3cf859eb646dfe09e5dd163172"><![CDATA[{
            bool connectionValid = true;

            try
            {
                SqlHelper.ExecuteReader(ConnectionString, Owner + Qualifier + "GetDatabaseVersion");
            }
            catch (SqlException ex)
            {
                foreach (SqlError c in ex.Errors)
                {
                    if (!(c.Number == 2812 && c.Class == 16))
                    {
                        connectionValid = false;
                        break;
                    }
                }
            }

            return connectionValid;
        }]]></body>
          </codeblock>
        </method>
        <method name="CanDeleteSkin">
          <declaration><![CDATA[public override bool CanDeleteSkin(string SkinType, string SkinFoldername)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2179" sc="9" el="2181" ec="10">SqlDataProvider.cs</location>
            <body hash="d89fb03c314b6643317046a4ba1f8128"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "CanDeleteSkin", SkinType, SkinFoldername)) == 1;
        }]]></body>
          </codeblock>
        </method>
        <method name="CommitTransaction">
          <declaration><![CDATA[public override void CommitTransaction(DbTransaction transaction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="479" sc="9" el="491" ec="10">SqlDataProvider.cs</location>
            <body hash="6edd07ecf721cddb5f5a48ed6e10087e"><![CDATA[{
            try
            {
                transaction.Commit();
            }
            finally
            {
                if (transaction != null && transaction.Connection != null)
                {
                    transaction.Connection.Close();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="CreatePortal">
          <declaration><![CDATA[public override int CreatePortal(string PortalName, string Currency, DateTime ExpiryDate, double HostFee, double HostSpace, int PageQuota, int UserQuota, int SiteLogHistory, string HomeDirectory, int CreatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="929" sc="9" el="943" ec="10">SqlDataProvider.cs</location>
            <body hash="f0688584445a24919b3b5639262dd175"><![CDATA[{
            return
                Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString,
                                                        DatabaseOwner + ObjectQualifier + "AddPortalInfo",
                                                        PortalName,
                                                        Currency,
                                                        GetNull(ExpiryDate),
                                                        HostFee,
                                                        HostSpace,
                                                        PageQuota,
                                                        UserQuota,
                                                        GetNull(SiteLogHistory),
                                                        HomeDirectory,
                                                        CreatedByUserID));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteAffiliate">
          <declaration><![CDATA[public override void DeleteAffiliate(int AffiliateId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2159" sc="9" el="2161" ec="10">SqlDataProvider.cs</location>
            <body hash="4e257dff9f695153e2312c54fed750c5"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteAffiliate", AffiliateId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteAuthentication">
          <declaration><![CDATA[public override void DeleteAuthentication(int authenticationID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3005" sc="9" el="3007" ec="10">SqlDataProvider.cs</location>
            <body hash="01c57d486b30ee27242dbc3e199d04a9"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteAuthentication", authenticationID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteBanner">
          <declaration><![CDATA[public override void DeleteBanner(int BannerId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2084" sc="9" el="2086" ec="10">SqlDataProvider.cs</location>
            <body hash="50b246aed0ab2b1fbc06751d2f89b67b"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteBanner", BannerId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteDesktopModule">
          <declaration><![CDATA[public override void DeleteDesktopModule(int desktopModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1645" sc="9" el="1647" ec="10">SqlDataProvider.cs</location>
            <body hash="1473ad02e9cd8a349686c7b9309b781c"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteDesktopModule", desktopModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteDesktopModulePermission">
          <declaration><![CDATA[public override void DeleteDesktopModulePermission(int desktopModulePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2575" sc="9" el="2577" ec="10">SqlDataProvider.cs</location>
            <body hash="e9918f9c8a5d7f791ebf0050a0992bf1"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteDesktopModulePermission", desktopModulePermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteDesktopModulePermissionsByPortalDesktopModuleID">
          <declaration><![CDATA[public override void DeleteDesktopModulePermissionsByPortalDesktopModuleID(int portalDesktopModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2565" sc="9" el="2567" ec="10">SqlDataProvider.cs</location>
            <body hash="c82503bf60169f11baa7781713805b29"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteDesktopModulePermissionsByPortalDesktopModuleID", portalDesktopModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteDesktopModulePermissionsByUserID">
          <declaration><![CDATA[public override void DeleteDesktopModulePermissionsByUserID(int userID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2570" sc="9" el="2572" ec="10">SqlDataProvider.cs</location>
            <body hash="7be333c0ab83eb6916c7a92e4cbec835"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteDesktopModulePermissionsByUserID", userID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFile">
          <declaration><![CDATA[public override void DeleteFile(int PortalId, string FileName, int FolderID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1857" sc="9" el="1859" ec="10">SqlDataProvider.cs</location>
            <body hash="56dc222d4f8bfd29c7a7d46e7779e470"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteFile", GetNull(PortalId), FileName, FolderID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFiles">
          <declaration><![CDATA[public override void DeleteFiles(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1862" sc="9" el="1864" ec="10">SqlDataProvider.cs</location>
            <body hash="b5c7e35dbcaa551cba4eaa35fdc45257"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteFiles", GetNull(PortalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFolder">
          <declaration><![CDATA[public override void DeleteFolder(int PortalID, string FolderPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2665" sc="9" el="2667" ec="10">SqlDataProvider.cs</location>
            <body hash="abf09bd99524015f847e9c744d1a1dcc"><![CDATA[{
            SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteFolder", GetNull(PortalID), FolderPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFolderMapping">
          <declaration><![CDATA[public override void DeleteFolderMapping(int folderMappingID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3237" sc="9" el="3239" ec="10">SqlDataProvider.cs</location>
            <body hash="fb2346bb12a87ea30317d036ec62bf4b"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteFolderMapping", folderMappingID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFolderPermission">
          <declaration><![CDATA[public override void DeleteFolderPermission(int FolderPermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2700" sc="9" el="2702" ec="10">SqlDataProvider.cs</location>
            <body hash="9835a1ac977afb39ebbbccce7a368ab3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteFolderPermission", FolderPermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFolderPermissionsByFolderPath">
          <declaration><![CDATA[public override void DeleteFolderPermissionsByFolderPath(int PortalID, string FolderPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2690" sc="9" el="2692" ec="10">SqlDataProvider.cs</location>
            <body hash="82bf912574c6d4afdcd0ffbdc499098e"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteFolderPermissionsByFolderPath", GetNull(PortalID), FolderPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteFolderPermissionsByUserID">
          <declaration><![CDATA[public override void DeleteFolderPermissionsByUserID(int PortalID, int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2695" sc="9" el="2697" ec="10">SqlDataProvider.cs</location>
            <body hash="a6a3338c8b8120d634baf44d4392016a"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteFolderPermissionsByUserID", PortalID, UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteLanguage">
          <declaration><![CDATA[public override void DeleteLanguage(int languageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3154" sc="9" el="3156" ec="10">SqlDataProvider.cs</location>
            <body hash="b0b2f310826f164e0a8cdf52bebec8f7"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteLanguage", languageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteLanguagePack">
          <declaration><![CDATA[public override void DeleteLanguagePack(int languagePackID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3194" sc="9" el="3196" ec="10">SqlDataProvider.cs</location>
            <body hash="1003d678c829a11e99e83add66d6934c"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteLanguagePack", languagePackID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteList">
          <declaration><![CDATA[public override void DeleteList(string ListName, string ParentKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2896" sc="9" el="2898" ec="10">SqlDataProvider.cs</location>
            <body hash="b4d83d98f1a4d83a4832d2ccb411e4dd"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteList", ListName, ParentKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteListEntryByID">
          <declaration><![CDATA[public override void DeleteListEntryByID(int EntryID, bool DeleteChild)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2891" sc="9" el="2893" ec="10">SqlDataProvider.cs</location>
            <body hash="abc46896174e524764681d435cc142b9"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteListEntryByID", EntryID, DeleteChild);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteListEntryByListName">
          <declaration><![CDATA[public override void DeleteListEntryByListName(string ListName, string Value, bool DeleteChild)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2901" sc="9" el="2903" ec="10">SqlDataProvider.cs</location>
            <body hash="d545fc3194735d254561d211752d79d5"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteListEntryByListName", ListName, Value, DeleteChild);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModule">
          <declaration><![CDATA[public override void DeleteModule(int ModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1401" sc="9" el="1403" ec="10">SqlDataProvider.cs</location>
            <body hash="91c03970bd268ddb0814b2e0354e16fe"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModule", ModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModuleControl">
          <declaration><![CDATA[public override void DeleteModuleControl(int ModuleControlId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1782" sc="9" el="1784" ec="10">SqlDataProvider.cs</location>
            <body hash="4ce164d834f1eee127ec4f6e79d7c171"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModuleControl", ModuleControlId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModuleDefinition">
          <declaration><![CDATA[public override void DeleteModuleDefinition(int ModuleDefId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1708" sc="9" el="1710" ec="10">SqlDataProvider.cs</location>
            <body hash="ca7dda66877ba94cdfb6c2fc1591f3e2"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModuleDefinition", ModuleDefId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModulePermission">
          <declaration><![CDATA[public override void DeleteModulePermission(int modulePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2468" sc="9" el="2470" ec="10">SqlDataProvider.cs</location>
            <body hash="fa883f81f9b0e4c3901789f3905690d6"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModulePermission", modulePermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModulePermissionsByModuleID">
          <declaration><![CDATA[public override void DeleteModulePermissionsByModuleID(int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2458" sc="9" el="2460" ec="10">SqlDataProvider.cs</location>
            <body hash="9acc93faef587de2dfae87febbaa8bae"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModulePermissionsByModuleID", ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModulePermissionsByUserID">
          <declaration><![CDATA[public override void DeleteModulePermissionsByUserID(int PortalID, int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2463" sc="9" el="2465" ec="10">SqlDataProvider.cs</location>
            <body hash="6a685247dba1440b126137353cd94bd7"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModulePermissionsByUserID", PortalID, UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModuleSetting">
          <declaration><![CDATA[public override void DeleteModuleSetting(int ModuleId, string SettingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1550" sc="9" el="1552" ec="10">SqlDataProvider.cs</location>
            <body hash="811c5a6941eba25e7876e7d5a20b899f"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModuleSetting", ModuleId, SettingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteModuleSettings">
          <declaration><![CDATA[public override void DeleteModuleSettings(int ModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1555" sc="9" el="1557" ec="10">SqlDataProvider.cs</location>
            <body hash="62267a4ef472f044493b6bc08a0f3655"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteModuleSettings", ModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePackage">
          <declaration><![CDATA[public override void DeletePackage(int packageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3075" sc="9" el="3077" ec="10">SqlDataProvider.cs</location>
            <body hash="5a93c414c50678e0576e6c3b0cbb8833"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePackage", packageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePermission">
          <declaration><![CDATA[public override void DeletePermission(int permissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2415" sc="9" el="2417" ec="10">SqlDataProvider.cs</location>
            <body hash="13d579b2ba5ff838a27eec98067afda3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePermission", permissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePortalAlias">
          <declaration><![CDATA[public override void DeletePortalAlias(int PortalAliasID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2936" sc="9" el="2938" ec="10">SqlDataProvider.cs</location>
            <body hash="6d4daa24ff363ade7bf6fe8370db2f42"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePortalAlias", PortalAliasID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePortalDesktopModules">
          <declaration><![CDATA[public override void DeletePortalDesktopModules(int PortalId, int DesktopModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1692" sc="9" el="1694" ec="10">SqlDataProvider.cs</location>
            <body hash="057921dddb31a02688c588efaf7aab38"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePortalDesktopModules", GetNull(PortalId), GetNull(DesktopModuleId));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePortalInfo">
          <declaration><![CDATA[public override void DeletePortalInfo(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="946" sc="9" el="948" ec="10">SqlDataProvider.cs</location>
            <body hash="46f3f9378aae1217a9b8d4bf7b5a0398"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePortalInfo", PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePortalLanguages">
          <declaration><![CDATA[public override void DeletePortalLanguages(int portalID, int languageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3174" sc="9" el="3176" ec="10">SqlDataProvider.cs</location>
            <body hash="c7716599178223851fb2649886d14dd2"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePortalLanguages", GetNull(portalID), GetNull(languageID));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePortalSetting">
          <declaration><![CDATA[public override void DeletePortalSetting(int PortalId, string SettingName, string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="951" sc="9" el="953" ec="10">SqlDataProvider.cs</location>
            <body hash="c00b511c3c2d59df5294a950e4df7d70"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePortalSetting", PortalId, SettingName, CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePortalSettings">
          <declaration><![CDATA[public override void DeletePortalSettings(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="956" sc="9" el="958" ec="10">SqlDataProvider.cs</location>
            <body hash="20b0b530a36d598a2d41d87e7dfe2fd3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePortalSettings", PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeletePreviewProfile">
          <declaration><![CDATA[public override void DeletePreviewProfile(int id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3295" sc="3" el="3297" ec="4">SqlDataProvider.cs</location>
            <body hash="6c75fa142c67c0869804961f4eb8f9b0"><![CDATA[{
			SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_DeletePreviewProfile", id);
		}]]></body>
          </codeblock>
        </method>
        <method name="DeletePropertyDefinition">
          <declaration><![CDATA[public override void DeletePropertyDefinition(int definitionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2284" sc="9" el="2286" ec="10">SqlDataProvider.cs</location>
            <body hash="749bf223f29eda10d8f2796183291e75"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeletePropertyDefinition", definitionId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteRedirection">
          <declaration><![CDATA[public override void DeleteRedirection(int id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3300" sc="3" el="3302" ec="4">SqlDataProvider.cs</location>
            <body hash="fbaa9ed794bfe4912d6cb3e0b063dd46"><![CDATA[{
			SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_DeleteRedirection", id);
		}]]></body>
          </codeblock>
        </method>
        <method name="DeleteRedirectionRule">
          <declaration><![CDATA[public override void DeleteRedirectionRule(int id)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3305" sc="3" el="3307" ec="4">SqlDataProvider.cs</location>
            <body hash="c0d2e56095ec54c65daf1e33703109c1"><![CDATA[{
			SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_DeleteRedirectionRule", id);
		}]]></body>
          </codeblock>
        </method>
        <method name="DeleteSearchItem">
          <declaration><![CDATA[public override void DeleteSearchItem(int SearchItemId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2746" sc="9" el="2748" ec="10">SqlDataProvider.cs</location>
            <body hash="0ba14804479998b4eaeb05790dd6e184"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteSearchItem", SearchItemId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSearchItems">
          <declaration><![CDATA[public override void DeleteSearchItems(int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2741" sc="9" el="2743" ec="10">SqlDataProvider.cs</location>
            <body hash="04a9cb6081c686f674b1e2d55d413032"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteSearchItems", ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSearchItemWords">
          <declaration><![CDATA[public override void DeleteSearchItemWords(int SearchItemId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2751" sc="9" el="2753" ec="10">SqlDataProvider.cs</location>
            <body hash="abaf1ee3fdf8207e5de2ce4146229c10"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteSearchItemWords", SearchItemId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteServer">
          <declaration><![CDATA[public override void DeleteServer(int ServerId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="899" sc="9" el="901" ec="10">SqlDataProvider.cs</location>
            <body hash="4db6bba786a58bf8774a98d4b7067b4c"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteServer", ServerId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSiteLog">
          <declaration><![CDATA[public override void DeleteSiteLog(DateTime DateTime, int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1955" sc="9" el="1957" ec="10">SqlDataProvider.cs</location>
            <body hash="f54e57ab5084b2fc5361cb22855a4020"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteSiteLog", DateTime, PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSkin">
          <declaration><![CDATA[public override void DeleteSkin(int skinID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2194" sc="9" el="2196" ec="10">SqlDataProvider.cs</location>
            <body hash="f25fcb64c8291a0d87c643b34ea309d1"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteSkin", skinID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSkinControl">
          <declaration><![CDATA[public override void DeleteSkinControl(int skinControlID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1799" sc="9" el="1801" ec="10">SqlDataProvider.cs</location>
            <body hash="cde89bfde92eb88de8e56c75dbc4f222"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteSkinControl", skinControlID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteSkinPackage">
          <declaration><![CDATA[public override void DeleteSkinPackage(int skinPackageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2199" sc="9" el="2201" ec="10">SqlDataProvider.cs</location>
            <body hash="5b473f9cf0ce0d5ac0742089bb9d0243"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteSkinPackage", skinPackageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTab">
          <declaration><![CDATA[public override void DeleteTab(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1187" sc="9" el="1189" ec="10">SqlDataProvider.cs</location>
            <body hash="a18bd14cb1b8b8d25c86437855d33c4d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTab", tabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabModule">
          <declaration><![CDATA[public override void DeleteTabModule(int TabId, int ModuleId, bool softDelete)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1453" sc="9" el="1455" ec="10">SqlDataProvider.cs</location>
            <body hash="f819e7ee1c6e75a11a3c6f0a11b68eb8"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabModule", TabId, ModuleId, softDelete);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabModuleSetting">
          <declaration><![CDATA[public override void DeleteTabModuleSetting(int TabModuleId, string SettingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1610" sc="9" el="1612" ec="10">SqlDataProvider.cs</location>
            <body hash="554b54be5f9abbc614ac21eef107a35d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabModuleSetting", TabModuleId, SettingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabModuleSettings">
          <declaration><![CDATA[public override void DeleteTabModuleSettings(int TabModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1615" sc="9" el="1617" ec="10">SqlDataProvider.cs</location>
            <body hash="5fdc2e9178c51810e47a83068bc0bdc4"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabModuleSettings", TabModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabPermission">
          <declaration><![CDATA[public override void DeleteTabPermission(int TabPermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2519" sc="9" el="2521" ec="10">SqlDataProvider.cs</location>
            <body hash="04a1d450712db8c48aa9a6d34b79c50d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabPermission", TabPermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabPermissionsByTabID">
          <declaration><![CDATA[public override void DeleteTabPermissionsByTabID(int TabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2509" sc="9" el="2511" ec="10">SqlDataProvider.cs</location>
            <body hash="0a095d1711ca6a98ff490925ff5d461d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabPermissionsByTabID", TabID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabPermissionsByUserID">
          <declaration><![CDATA[public override void DeleteTabPermissionsByUserID(int PortalID, int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2514" sc="9" el="2516" ec="10">SqlDataProvider.cs</location>
            <body hash="648cc08407c37ebddddf069b0bfdb819"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabPermissionsByUserID", PortalID, UserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabSetting">
          <declaration><![CDATA[public override void DeleteTabSetting(int TabId, string SettingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1580" sc="9" el="1582" ec="10">SqlDataProvider.cs</location>
            <body hash="be9981d866c6efce108e9f87067e3cf3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabSetting", TabId, SettingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteTabSettings">
          <declaration><![CDATA[public override void DeleteTabSettings(int TabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1585" sc="9" el="1587" ec="10">SqlDataProvider.cs</location>
            <body hash="74f540271c74280ae4dd1b03f1d9ef9f"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteTabSettings", TabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUrl">
          <declaration><![CDATA[public override void DeleteUrl(int PortalID, string Url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2340" sc="9" el="2342" ec="10">SqlDataProvider.cs</location>
            <body hash="fe208e0fb9003c81d2d2d460d12c189a"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteUrl", PortalID, Url);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteUrlTracking">
          <declaration><![CDATA[public override void DeleteUrlTracking(int PortalID, string Url, int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2360" sc="9" el="2362" ec="10">SqlDataProvider.cs</location>
            <body hash="5428203ca569b0176f199b1703041cb1"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteUrlTracking", PortalID, Url, GetNull(ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteVendor">
          <declaration><![CDATA[public override void DeleteVendor(int VendorId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1993" sc="9" el="1995" ec="10">SqlDataProvider.cs</location>
            <body hash="b837fb594a8245f646bba28e6a5a78e7"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteVendor", VendorId);
        }]]></body>
          </codeblock>
        </method>
        <method name="DeleteVendorClassifications">
          <deprecation>Obsoleted in 6.0.0, the Vendor Classifications feature was never fully implemented and will be removed from the API</deprecation>
          <declaration><![CDATA[public override void DeleteVendorClassifications(int VendorId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2058" sc="9" el="2060" ec="10">SqlDataProvider.cs</location>
            <body hash="ddd69e6cc32724bff53ec590f1166e33"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "DeleteVendorClassifications", VendorId);
        }]]></body>
          </codeblock>
        </method>
        <method name="EnsureLocalizationExists">
          <declaration><![CDATA[public override void EnsureLocalizationExists(int portalID, string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3220" sc="9" el="3222" ec="10">SqlDataProvider.cs</location>
            <body hash="345146d4a805a9bccf1e4bc548b023d3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "EnsureLocalizationExists", portalID, CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteADOScript">
          <declaration><![CDATA[private void ExecuteADOScript(SqlTransaction trans, string SQL)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="183" sc="9" el="193" ec="10">SqlDataProvider.cs</location>
            <body hash="5cb52ccf76fde4536ae824eaae896a9e"><![CDATA[{
            //Get the connection
            SqlConnection connection = trans.Connection;

            //Create a new command (with no timeout)
            var command = new SqlCommand(SQL, trans.Connection);
            command.Transaction = trans;
            command.CommandTimeout = 0;

            command.ExecuteNonQuery();
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteADOScript">
          <declaration><![CDATA[private void ExecuteADOScript(string SQL)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="196" sc="9" el="206" ec="10">SqlDataProvider.cs</location>
            <body hash="bad3b3357dbe2c58b51921e57dcd3e15"><![CDATA[{
            //Create a new connection
            var connection = new SqlConnection(UpgradeConnectionString);

            //Create a new command (with no timeout)
            var command = new SqlCommand(SQL, connection);
            command.CommandTimeout = 0;
            connection.Open();
            command.ExecuteNonQuery();
            connection.Close();
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteADOScript">
          <deprecation>Temporarily Added in DNN 5.4.2. This will be removed and replaced with named instance support.</deprecation>
          <declaration><![CDATA[private void ExecuteADOScript(string ConnectionString, string SQL)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="210" sc="9" el="222" ec="10">SqlDataProvider.cs</location>
            <body hash="bf0d3fd9ee6428ac39e1bae4d2c51a5d"><![CDATA[{
            //Create a new connection
            var connection = new SqlConnection(ConnectionString);
            //Create a new command (with no timeout)
            var command = new SqlCommand(SQL, connection);
            command.CommandTimeout = 0;

            connection.Open();

            command.ExecuteNonQuery();

            connection.Close();
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteDataSet">
          <declaration><![CDATA[public override DataSet ExecuteDataSet(string ProcedureName, params object[] commandParameters)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="424" sc="9" el="426" ec="10">SqlDataProvider.cs</location>
            <body hash="8cd1e18d34a5f73555f1c657d2219ac2"><![CDATA[{
            return SqlHelper.ExecuteDataset(_connectionString, DatabaseOwner + ObjectQualifier + ProcedureName, commandParameters);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteNonQuery">
          <declaration><![CDATA[public override void ExecuteNonQuery(string ProcedureName, params object[] commandParameters)]]></declaration>
          <documentation>-----------------------------------------------------------------------------
 <summary>
 ExecuteReader executes a stored procedure or "dynamic sql" statement, against
 the database
 </summary>
 <remarks>
 </remarks>
 <param name="ProcedureName">The name of the Stored Procedure to Execute</param>
 <param name="commandParameters">An array of parameters to pass to the Database</param>
 <history>
 	[cnurse]	12/11/2005	created
 </history>
 -----------------------------------------------------------------------------</documentation>
          <codeblock>
            <location sl="398" sc="9" el="400" ec="10">SqlDataProvider.cs</location>
            <body hash="649994aceed196b17d3ca1682dc85a1f"><![CDATA[{
            SqlHelper.ExecuteNonQuery(_connectionString, DatabaseOwner + ObjectQualifier + ProcedureName, commandParameters);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteReader">
          <declaration><![CDATA[public override IDataReader ExecuteReader(string ProcedureName, params object[] commandParameters)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="403" sc="9" el="405" ec="10">SqlDataProvider.cs</location>
            <body hash="f83019dbde0b5265533cfc0a74efcecb"><![CDATA[{
            return SqlHelper.ExecuteReader(_connectionString, DatabaseOwner + ObjectQualifier + ProcedureName, commandParameters);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScalar">
          <declaration><![CDATA[public override object ExecuteScalar(string ProcedureName, params object[] commandParameters)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="408" sc="9" el="410" ec="10">SqlDataProvider.cs</location>
            <body hash="20885c2bd1d5c76ebf0a456a3618d178"><![CDATA[{
            return SqlHelper.ExecuteScalar(_connectionString, DatabaseOwner + ObjectQualifier + ProcedureName, commandParameters);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScalar">
          <declaration><![CDATA[public override T ExecuteScalar<T>(string ProcedureName, params object[] commandParameters)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="413" sc="9" el="421" ec="10">SqlDataProvider.cs</location>
            <body hash="a40d8745127fc28552b1f627f935f897"><![CDATA[{
            object retObject = ExecuteScalar(ProcedureName, commandParameters);
            T retValue = default(T);
            if (retObject != null)
            {
                retValue = (T)Convert.ChangeType(retObject, typeof(T));
            }
            return retValue;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScript">
          <declaration><![CDATA[public override string ExecuteScript(string Script, DbTransaction transaction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="494" sc="9" el="528" ec="10">SqlDataProvider.cs</location>
            <body hash="a7ef0bc8953fb275594a70dfc4eace16"><![CDATA[{
            string Exceptions = "";
            string[] arrSQL = SqlDelimiterRegex.Split(Script);
            bool IgnoreErrors;
            foreach (string SQL in arrSQL)
            {
                string s = SQL;
                if (!String.IsNullOrEmpty(s.Trim()))
                {
                    //script dynamic substitution
                    s = s.Replace("{databaseOwner}", DatabaseOwner);
                    s = s.Replace("{objectQualifier}", ObjectQualifier);
                    IgnoreErrors = false;
                    if (s.Trim().StartsWith("{IgnoreError}"))
                    {
                        IgnoreErrors = true;
                        s = s.Replace("{IgnoreError}", "");
                    }
                    try
                    {
                        ExecuteADOScript((SqlTransaction)transaction, s);
                    }
                    catch (SqlException objException)
                    {
                        DnnLog.Debug(objException);

                        if (!IgnoreErrors)
                        {
                            Exceptions += objException + Environment.NewLine + Environment.NewLine + s + Environment.NewLine + Environment.NewLine;
                        }
                    }
                }
            }
            return Exceptions;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScript">
          <declaration><![CDATA[public override string ExecuteScript(string Script)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="554" sc="9" el="556" ec="10">SqlDataProvider.cs</location>
            <body hash="196ba4d8dcd41c84cc7358e84f225c8b"><![CDATA[{
            return ExecuteScript(Script, false);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScript">
          <deprecation>Temporarily Added in DNN 5.4.2. This will be removed and replaced with named instance support.</deprecation>
          <declaration><![CDATA[public override string ExecuteScript(string connectionString, string script)]]></declaration>
          <documentation>
            <summary>
   This is a temporary overload until proper support for named instances is added to the core.
 </summary>
 <param name="connectionString"></param>
 <param name="script"></param>
 <returns></returns>
 <remarks>
 </remarks></documentation>
          <codeblock>
            <location sl="568" sc="9" el="593" ec="10">SqlDataProvider.cs</location>
            <body hash="bf44c386293ae18cb13e291a26121d62"><![CDATA[{
            string exceptions = "";
            string[] sqlStatements = SqlDelimiterRegex.Split(script);
            foreach (string statement in sqlStatements)
            {
                var sql = statement.Trim();

                if (!string.IsNullOrEmpty(sql))
                {
                    // script dynamic substitution
                    sql = sql.Replace("{databaseOwner}", DatabaseOwner).Replace("{objectQualifier}", ObjectQualifier);
                    try
                    {
                        ExecuteADOScript(connectionString, sql);
                    }
                    catch (SqlException objException)
                    {
                        DnnLog.Debug(objException);

                        exceptions += objException + Environment.NewLine + Environment.NewLine + sql + Environment.NewLine + Environment.NewLine;
                    }
                }
            }

            return exceptions;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteScript">
          <declaration><![CDATA[public override string ExecuteScript(string Script, bool UseTransactions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="596" sc="9" el="685" ec="10">SqlDataProvider.cs</location>
            <body hash="36ebed6b25f3ea07bb4de59285f782b8"><![CDATA[{
            string Exceptions = "";
            if (UseTransactions)
            {
                DbTransaction transaction = GetTransaction();
                try
                {
                    Exceptions += ExecuteScript(Script, transaction);
                    if (String.IsNullOrEmpty(Exceptions))
                    {
                        //No exceptions so go ahead and commit
                        CommitTransaction(transaction);
                    }
                    else
                    {
                        //Found exceptions, so rollback db
                        RollbackTransaction(transaction);
                        Exceptions += "SQL Execution failed.  Database was rolled back" + Environment.NewLine + Environment.NewLine + Script + Environment.NewLine + Environment.NewLine;
                    }
                }
                finally
                {
                    if (transaction != null && transaction.Connection != null)
                    {
                        transaction.Connection.Close();
                    }
                }
            }
            else
            {
                string[] arrSQL = SqlDelimiterRegex.Split(Script);
                foreach (string SQL in arrSQL)
                {
                    string s = SQL;
                    if (!String.IsNullOrEmpty(s.Trim()))
                    {
                        //script dynamic substitution
                        s = s.Replace("{databaseOwner}", DatabaseOwner);
                        s = s.Replace("{objectQualifier}", ObjectQualifier);
                        try
                        {
                            DnnLog.Trace("Executing SQL Script " + s);
                            ExecuteADOScript(s);
                        }
                        catch (SqlException objException)
                        {
                            DnnLog.Debug(objException);

                            Exceptions += objException + Environment.NewLine + Environment.NewLine + s + Environment.NewLine + Environment.NewLine;
                        }
                    }
                }
            }

            //if the upgrade connection string is specified or or db_owner setting is not set to dbo
            if (UpgradeConnectionString != ConnectionString || DatabaseOwner.Trim().ToLower() != "dbo.")
            {
                try
                {
                    //grant execute rights to the public role or userid for all stored procedures. This is
                    //necesary because the UpgradeConnectionString will create stored procedures
                    //which restrict execute permissions for the ConnectionString user account. This is also
                    //necessary when db_owner is not set to "dbo" 
                    Exceptions += GrantStoredProceduresPermission("EXECUTE", GetConnectionStringUserID());
                }
                catch (SqlException objException)
                {
                    DnnLog.Debug(objException);

                    Exceptions += objException + Environment.NewLine + Environment.NewLine + Script + Environment.NewLine + Environment.NewLine;
                }

                try
                {
                    //grant execute or select rights to the public role or userid for all user defined functions based
                    //on what type of function it is (scalar function or table function). This is
                    //necesary because the UpgradeConnectionString will create user defined functions
                    //which restrict execute permissions for the ConnectionString user account.  This is also
                    //necessary when db_owner is not set to "dbo" 
                    Exceptions += GrantUserDefinedFunctionsPermission("EXECUTE", "SELECT", GetConnectionStringUserID());
                }
                catch (SqlException objException)
                {
                    DnnLog.Debug(objException);

                    Exceptions += objException + Environment.NewLine + Environment.NewLine + Script + Environment.NewLine + Environment.NewLine;
                }
            }
            return Exceptions;
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteSQL">
          <declaration><![CDATA[public override IDataReader ExecuteSQL(string SQL)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="429" sc="9" el="431" ec="10">SqlDataProvider.cs</location>
            <body hash="1663d56c871fdaba25ef9b607458be1d"><![CDATA[{
            return ExecuteSQLInternal(_connectionString, SQL, (IDataParameter)null);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteSQL">
          <deprecation>Temporarily Added in DNN 5.4.2. This will be removed and replaced with named instance support.</deprecation>
          <declaration><![CDATA[public override IDataReader ExecuteSQL(string SQL, params IDataParameter[] commandParameters)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="435" sc="9" el="437" ec="10">SqlDataProvider.cs</location>
            <body hash="3b7f4a5a38101b814bc1ff9fa5aee815"><![CDATA[{
            return ExecuteSQLInternal(_connectionString, SQL, commandParameters);
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteSQLInternal">
          <declaration><![CDATA[public IDataReader ExecuteSQLInternal(string ConnectionString, string SQL, params IDataParameter[] commandParameters)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="445" sc="9" el="466" ec="10">SqlDataProvider.cs</location>
            <body hash="45002fc16fbb0cfaa3b8154de6a7b549"><![CDATA[{
            SqlParameter[] sqlCommandParameters = null;
            if (commandParameters != null)
            {
                sqlCommandParameters = new SqlParameter[commandParameters.Length];
                for (int intIndex = 0; intIndex <= commandParameters.Length - 1; intIndex++)
                {
                    sqlCommandParameters[intIndex] = (SqlParameter)commandParameters[intIndex];
                }
            }
            SQL = SQL.Replace("{databaseOwner}", DatabaseOwner);
            SQL = SQL.Replace("{objectQualifier}", ObjectQualifier);
            try
            {
                return SqlHelper.ExecuteReader(ConnectionString, CommandType.Text, SQL, sqlCommandParameters);
            }
            catch
            {
                //error in SQL query
                return null;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="ExecuteSQLTemp">
          <declaration><![CDATA[public override IDataReader ExecuteSQLTemp(string ConnectionString, string SQL)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="440" sc="9" el="442" ec="10">SqlDataProvider.cs</location>
            <body hash="046ca72e933366c1f97e6924b913990b"><![CDATA[{
            return ExecuteSQLInternal(ConnectionString, SQL, (IDataParameter)null);
        }]]></body>
          </codeblock>
        </method>
        <method name="FindBanners">
          <declaration><![CDATA[public override IDataReader FindBanners(int PortalId, int BannerTypeId, string GroupName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2134" sc="9" el="2136" ec="10">SqlDataProvider.cs</location>
            <body hash="ac27bcb67d83946369b2a43ceed62a0d"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "FindBanners", GetNull(PortalId), GetNull(BannerTypeId), GetNull(GroupName));
        }]]></body>
          </codeblock>
        </method>
        <method name="FindDatabaseVersion">
          <declaration><![CDATA[public override IDataReader FindDatabaseVersion(int Major, int Minor, int Build)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="712" sc="9" el="714" ec="10">SqlDataProvider.cs</location>
            <body hash="27aed7a3f26d00750c7b0fdde69f8b87"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "FindDatabaseVersion", Major, Minor, Build);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAffiliate">
          <declaration><![CDATA[public override IDataReader GetAffiliate(int AffiliateId, int VendorId, int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2154" sc="9" el="2156" ec="10">SqlDataProvider.cs</location>
            <body hash="c6ea5e468d6efb30bb49df2e0d268218"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAffiliate", AffiliateId, VendorId, GetNull(PortalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAffiliates">
          <declaration><![CDATA[public override IDataReader GetAffiliates(int VendorId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2149" sc="9" el="2151" ec="10">SqlDataProvider.cs</location>
            <body hash="e8e2e556ee3152fe0ead8ee304861133"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAffiliates", VendorId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllFiles">
          <declaration><![CDATA[public override DataTable GetAllFiles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1907" sc="9" el="1909" ec="10">SqlDataProvider.cs</location>
            <body hash="d6c41fd7b0a239019f3b94e03fca86be"><![CDATA[{
            return SqlHelper.ExecuteDataset(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAllFiles").Tables[0];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllModules">
          <declaration><![CDATA[public override IDataReader GetAllModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1335" sc="9" el="1337" ec="10">SqlDataProvider.cs</location>
            <body hash="1b03c611b7e1ea0931e4200e01c7f5e3"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAllModules");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllProfiles">
          <declaration><![CDATA[public override IDataReader GetAllProfiles()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2224" sc="9" el="2226" ec="10">SqlDataProvider.cs</location>
            <body hash="fd0450e6662736867697cd17f2248808"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAllProfiles");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllRedirections">
          <declaration><![CDATA[public override IDataReader GetAllRedirections()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3315" sc="3" el="3317" ec="4">SqlDataProvider.cs</location>
            <body hash="224f0170f1e6fd95895d06c28b3dba16"><![CDATA[{
			return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_GetAllRedirections");
		}]]></body>
          </codeblock>
        </method>
        <method name="GetAllTabs">
          <declaration><![CDATA[public override IDataReader GetAllTabs()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1269" sc="9" el="1271" ec="10">SqlDataProvider.cs</location>
            <body hash="3f6dc01df248031a74e1ed5b0ffdaabd"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAllTabs");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllTabsModules">
          <declaration><![CDATA[public override IDataReader GetAllTabsModules(int PortalId, bool AllTabs)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1345" sc="9" el="1347" ec="10">SqlDataProvider.cs</location>
            <body hash="d0df8e93f1a4231770352cc6d976386d"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAllTabsModules", PortalId, AllTabs);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAllTabsModulesByModuleID">
          <declaration><![CDATA[public override IDataReader GetAllTabsModulesByModuleID(int ModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1350" sc="9" el="1352" ec="10">SqlDataProvider.cs</location>
            <body hash="c7268ee8ccf8062a8f877e8e4594b5f2"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAllTabsModulesByModuleID", ModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAuthenticationService">
          <declaration><![CDATA[public override IDataReader GetAuthenticationService(int authenticationID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3010" sc="9" el="3012" ec="10">SqlDataProvider.cs</location>
            <body hash="99b2e5fffeda71a01775c077a6c1268d"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAuthenticationService", authenticationID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAuthenticationServiceByPackageID">
          <declaration><![CDATA[public override IDataReader GetAuthenticationServiceByPackageID(int packageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3015" sc="9" el="3017" ec="10">SqlDataProvider.cs</location>
            <body hash="e62b5112937d959a894380200a462c9a"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAuthenticationServiceByPackageID", packageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAuthenticationServiceByType">
          <declaration><![CDATA[public override IDataReader GetAuthenticationServiceByType(string authenticationType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3020" sc="9" el="3022" ec="10">SqlDataProvider.cs</location>
            <body hash="6269a466d61acaf7cac774216b211463"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAuthenticationServiceByType", authenticationType);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetAuthenticationServices">
          <declaration><![CDATA[public override IDataReader GetAuthenticationServices()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3025" sc="9" el="3027" ec="10">SqlDataProvider.cs</location>
            <body hash="73df1d85601b9e52c1e80b5d4c69a9d9"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetAuthenticationServices");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBanner">
          <declaration><![CDATA[public override IDataReader GetBanner(int BannerId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2074" sc="9" el="2076" ec="10">SqlDataProvider.cs</location>
            <body hash="d1a31b25d6a48f26474dfae76c3dc8d7"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetBanner", BannerId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBannerGroups">
          <declaration><![CDATA[public override DataTable GetBannerGroups(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2079" sc="9" el="2081" ec="10">SqlDataProvider.cs</location>
            <body hash="11c049535daa90aeef9b142f1ac9ee45"><![CDATA[{
            return SqlHelper.ExecuteDataset(ConnectionString, DatabaseOwner + ObjectQualifier + "GetBannerGroups", GetNull(PortalId)).Tables[0];
        }]]></body>
          </codeblock>
        </method>
        <method name="GetBanners">
          <declaration><![CDATA[public override IDataReader GetBanners(int VendorId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2069" sc="9" el="2071" ec="10">SqlDataProvider.cs</location>
            <body hash="55693201936be0f63c53d446439a99fa"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetBanners", VendorId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetConnectionStringBuilder">
          <declaration><![CDATA[public override DbConnectionStringBuilder GetConnectionStringBuilder()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="469" sc="9" el="471" ec="10">SqlDataProvider.cs</location>
            <body hash="f427c7b670f9f3939d530c0abf9f992f"><![CDATA[{
            return new SqlConnectionStringBuilder();
        }]]></body>
          </codeblock>
        </method>
        <method name="GetConnectionStringUserID">
          <declaration><![CDATA[private string GetConnectionStringUserID()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="237" sc="9" el="262" ec="10">SqlDataProvider.cs</location>
            <body hash="d69c4af4504fd3b1cfa6c473d841edef"><![CDATA[{
            string DBUser = "public";
            string[] ConnSettings;
            string[] ConnSetting;

            ConnSettings = ConnectionString.Split(';');

            //If connection string does not use integrated security, then get user id.
            if (ConnectionString.ToUpper().Contains("USER ID") || ConnectionString.ToUpper().Contains("UID") || ConnectionString.ToUpper().Contains("USER"))
            {
                ConnSettings = ConnectionString.Split(';');

                foreach (string s in ConnSettings)
                {
                    if (s != string.Empty)
                    {
                        ConnSetting = s.Split('=');
                        if ("USER ID|UID|USER".Contains(ConnSetting[0].Trim().ToUpper()))
                        {
                            DBUser = ConnSetting[1].Trim();
                        }
                    }
                }
            }
            return DBUser;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDatabaseEngineVersion">
          <declaration><![CDATA[public override Version GetDatabaseEngineVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="693" sc="9" el="709" ec="10">SqlDataProvider.cs</location>
            <body hash="dc0cd5c13f9404ba974ba30577ae0887"><![CDATA[{
            string version = "0.0";
            IDataReader dr = null;
            try
            {
                dr = GetDatabaseServer();
                if (dr.Read())
                {
                    version = dr["Version"].ToString();
                }
            }
            finally
            {
                CBO.CloseDataReader(dr, true);
            }
            return new Version(version);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDatabaseServer">
          <declaration><![CDATA[public override IDataReader GetDatabaseServer()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="688" sc="9" el="690" ec="10">SqlDataProvider.cs</location>
            <body hash="c3b02a93401704a42d253c2acee2d56b"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDatabaseServer");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDatabaseTime">
          <declaration><![CDATA[public override DateTime GetDatabaseTime()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3288" sc="9" el="3290" ec="10">SqlDataProvider.cs</location>
            <body hash="dd2b552ca95a6fff90dc5fdc53f17a1a"><![CDATA[{
            return Convert.ToDateTime(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDatabaseTime"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDatabaseTimeUtc">
          <declaration><![CDATA[public override DateTime GetDatabaseTimeUtc()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3283" sc="9" el="3285" ec="10">SqlDataProvider.cs</location>
            <body hash="908bf361e0e201e2924d5af21a4d6cb5"><![CDATA[{
            return Convert.ToDateTime(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDatabaseTimeUtc"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDatabaseVersion">
          <declaration><![CDATA[public override IDataReader GetDatabaseVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="717" sc="9" el="719" ec="10">SqlDataProvider.cs</location>
            <body hash="ab45c9e043283ad759bdfcf5c66bb48b"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDatabaseVersion");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDefaultLanguageByModule">
          <declaration><![CDATA[public override IDataReader GetDefaultLanguageByModule(string ModuleList)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2776" sc="9" el="2778" ec="10">SqlDataProvider.cs</location>
            <body hash="edc62fe9c13af61d9c3a434c339844cf"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDefaultLanguageByModule", ModuleList);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDesktopModulePermission">
          <declaration><![CDATA[public override IDataReader GetDesktopModulePermission(int desktopModulePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2550" sc="9" el="2552" ec="10">SqlDataProvider.cs</location>
            <body hash="3706d868df80b7f6d2bb5d95a2abce53"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDesktopModulePermission", desktopModulePermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDesktopModulePermissions">
          <declaration><![CDATA[public override IDataReader GetDesktopModulePermissions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2560" sc="9" el="2562" ec="10">SqlDataProvider.cs</location>
            <body hash="5bbf70d84144963dec66924c63ada3b3"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDesktopModulePermissions");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDesktopModulePermissionsByPortalDesktopModuleID">
          <declaration><![CDATA[public override IDataReader GetDesktopModulePermissionsByPortalDesktopModuleID(int portalDesktopModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2555" sc="9" el="2557" ec="10">SqlDataProvider.cs</location>
            <body hash="0301203477dde48d878a8fed4fac20f4"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDesktopModulePermissionsByPortalDesktopModuleID", portalDesktopModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDesktopModules">
          <declaration><![CDATA[public override IDataReader GetDesktopModules()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1650" sc="9" el="1652" ec="10">SqlDataProvider.cs</location>
            <body hash="a951cdf833dfadb7e7f15157a4d6dca7"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDesktopModules");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetDesktopModulesByPortal">
          <declaration><![CDATA[public override IDataReader GetDesktopModulesByPortal(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1655" sc="9" el="1657" ec="10">SqlDataProvider.cs</location>
            <body hash="06fc86e32e7eec028b0024bb08b28f2c"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetDesktopModulesByPortal", PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEnabledAuthenticationServices">
          <declaration><![CDATA[public override IDataReader GetEnabledAuthenticationServices()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3030" sc="9" el="3032" ec="10">SqlDataProvider.cs</location>
            <body hash="b0dace5843a1c88daa997f9147f30e69"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetEnabledAuthenticationServices");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEventMessages">
          <declaration><![CDATA[public override IDataReader GetEventMessages(string eventName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2970" sc="9" el="2972" ec="10">SqlDataProvider.cs</location>
            <body hash="6b41b41ca180421958a6a89738a86a11"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetEventMessages", eventName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetEventMessagesBySubscriber">
          <declaration><![CDATA[public override IDataReader GetEventMessagesBySubscriber(string eventName, string subscriberId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2975" sc="9" el="2977" ec="10">SqlDataProvider.cs</location>
            <body hash="6d4cb7be3108d4f48f8ae80741f31b99"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetEventMessagesBySubscriber", eventName, subscriberId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetExpiredPortals">
          <declaration><![CDATA[public override IDataReader GetExpiredPortals()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="961" sc="9" el="963" ec="10">SqlDataProvider.cs</location>
            <body hash="0a08560640266bfb69519e1ccbdf2925"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetExpiredPortals");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFields">
          <declaration><![CDATA[public override IDataReader GetFields(string TableName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1966" sc="9" el="1969" ec="10">SqlDataProvider.cs</location>
            <body hash="e648ca0d2ca25517401bffaefa2d401b"><![CDATA[{
            string SQL = "SELECT * FROM {objectQualifier}" + TableName + " WHERE 1 = 0";
            return ExecuteSQL(SQL);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFile">
          <declaration><![CDATA[public override IDataReader GetFile(string FileName, int FolderID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1842" sc="9" el="1844" ec="10">SqlDataProvider.cs</location>
            <body hash="1073ffc7511efa3545e1c0707c169b89"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFile", FileName, FolderID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileById">
          <declaration><![CDATA[public override IDataReader GetFileById(int FileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1847" sc="9" el="1849" ec="10">SqlDataProvider.cs</location>
            <body hash="80c9045c9e3cba0c9bb889a04b9cd35f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFileById", FileId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileByUniqueID">
          <declaration><![CDATA[public override IDataReader GetFileByUniqueID(Guid UniqueID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1852" sc="9" el="1854" ec="10">SqlDataProvider.cs</location>
            <body hash="9117f8bfc59f20d4ba2d8447c0ee48a1"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFileByUniqueID", UniqueID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFileContent">
          <declaration><![CDATA[public override IDataReader GetFileContent(int FileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1912" sc="9" el="1914" ec="10">SqlDataProvider.cs</location>
            <body hash="76c3f8e1925f1d8806c472df1dd324f6"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFileContent", FileId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFiles">
          <declaration><![CDATA[public override IDataReader GetFiles(int FolderID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1837" sc="9" el="1839" ec="10">SqlDataProvider.cs</location>
            <body hash="3a733c10c51e73fbbdc454e2f765661f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFiles", FolderID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolder">
          <declaration><![CDATA[public override IDataReader GetFolder(int FolderID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2617" sc="9" el="2619" ec="10">SqlDataProvider.cs</location>
            <body hash="4007648c45a8665f5c784266e68816a8"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderByFolderID", FolderID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolder">
          <declaration><![CDATA[public override IDataReader GetFolder(int PortalID, string FolderPath)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2622" sc="9" el="2624" ec="10">SqlDataProvider.cs</location>
            <body hash="258ad14968d5f5ce0f28d77dba369e6c"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderByFolderPath", GetNull(PortalID), FolderPath);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderByUniqueID">
          <declaration><![CDATA[public override IDataReader GetFolderByUniqueID(Guid UniqueID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2627" sc="9" el="2629" ec="10">SqlDataProvider.cs</location>
            <body hash="fa39d7246266d0994953b0e9d4e48b57"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderByUniqueID", UniqueID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMapping">
          <declaration><![CDATA[public override IDataReader GetFolderMapping(int folderMappingID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3242" sc="9" el="3244" ec="10">SqlDataProvider.cs</location>
            <body hash="0f2334bbf33c571a7c7e6c1ecd63f564"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderMapping", folderMappingID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappingByMappingName">
          <declaration><![CDATA[public override IDataReader GetFolderMappingByMappingName(int portalID, string mappingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3247" sc="9" el="3249" ec="10">SqlDataProvider.cs</location>
            <body hash="248921e6d6b86e60e32cad83b3a44c62"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderMappingByMappingName", portalID, mappingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappings">
          <declaration><![CDATA[public override IDataReader GetFolderMappings(int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3252" sc="9" el="3254" ec="10">SqlDataProvider.cs</location>
            <body hash="a727e2c498c506802e12f01f3a9986d5"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderMappings", GetNull(portalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappingSetting">
          <declaration><![CDATA[public override IDataReader GetFolderMappingSetting(int folderMappingID, string settingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3272" sc="9" el="3274" ec="10">SqlDataProvider.cs</location>
            <body hash="2700d5b327a7915e83e7cec805c4450d"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderMappingsSetting", folderMappingID, settingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderMappingSettings">
          <declaration><![CDATA[public override IDataReader GetFolderMappingSettings(int folderMappingID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3257" sc="9" el="3259" ec="10">SqlDataProvider.cs</location>
            <body hash="abe240e28baaad92bd9f123a70238262"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderMappingsSettings", folderMappingID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPermission">
          <declaration><![CDATA[public override IDataReader GetFolderPermission(int FolderPermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2675" sc="9" el="2677" ec="10">SqlDataProvider.cs</location>
            <body hash="c33d4a11b43225788bd0b58e9b38e5bf"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderPermission", FolderPermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPermissionsByFolderPath">
          <declaration><![CDATA[public override IDataReader GetFolderPermissionsByFolderPath(int PortalID, string FolderPath, int PermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2685" sc="9" el="2687" ec="10">SqlDataProvider.cs</location>
            <body hash="01eb82381ffb729348e5c0870699723f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderPermissionsByFolderPath", GetNull(PortalID), FolderPath, PermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFolderPermissionsByPortal">
          <declaration><![CDATA[public override IDataReader GetFolderPermissionsByPortal(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2680" sc="9" el="2682" ec="10">SqlDataProvider.cs</location>
            <body hash="67c65572319161b2c5e4acae2168e87f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolderPermissionsByPortal", GetNull(PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFoldersByPortal">
          <declaration><![CDATA[public override IDataReader GetFoldersByPortal(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2607" sc="9" el="2609" ec="10">SqlDataProvider.cs</location>
            <body hash="aa1e6e609c1a5efded8c5ad23c3c262e"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFolders", GetNull(PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetFoldersByPortalAndPermissions">
          <declaration><![CDATA[public override IDataReader GetFoldersByPortalAndPermissions(int PortalID, string Permissions, int UserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2612" sc="9" el="2614" ec="10">SqlDataProvider.cs</location>
            <body hash="daae9ac25a2c76d0c0ef315657e7dc1a"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetFoldersByPermissions", GetNull(PortalID), GetNull(Permissions), GetNull(UserID), -1, "");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostSetting">
          <declaration><![CDATA[public override IDataReader GetHostSetting(string SettingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="869" sc="9" el="871" ec="10">SqlDataProvider.cs</location>
            <body hash="35fdca910c640e3b122522217624f40a"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetHostSetting", SettingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetHostSettings">
          <declaration><![CDATA[public override IDataReader GetHostSettings()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="864" sc="9" el="866" ec="10">SqlDataProvider.cs</location>
            <body hash="f8da45080a375c23a52af90e2dbea20b"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetHostSettings");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguagePackByPackage">
          <declaration><![CDATA[public override IDataReader GetLanguagePackByPackage(int packageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3199" sc="9" el="3201" ec="10">SqlDataProvider.cs</location>
            <body hash="06beb0357372dc529d17a564016b9c0d"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetLanguagePackByPackage", packageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguages">
          <declaration><![CDATA[public override IDataReader GetLanguages()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3159" sc="9" el="3161" ec="10">SqlDataProvider.cs</location>
            <body hash="34f64d851ca12fdf284cf438b21ae2ea"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetLanguages");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLanguagesByPortal">
          <declaration><![CDATA[public override IDataReader GetLanguagesByPortal(int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3179" sc="9" el="3181" ec="10">SqlDataProvider.cs</location>
            <body hash="51129cdb4ee5183eda10cc60187586d9"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetLanguagesByPortal", portalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetList">
          <declaration><![CDATA[public override IDataReader GetList(string ListName, string ParentKey, int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2847" sc="9" el="2849" ec="10">SqlDataProvider.cs</location>
            <body hash="7ad2683d4a4becbd7022d1760fa28ec9"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetList", ListName, ParentKey, PortalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetListEntriesByListName">
          <declaration><![CDATA[public override IDataReader GetListEntriesByListName(string ListName, string ParentKey, int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2862" sc="9" el="2864" ec="10">SqlDataProvider.cs</location>
            <body hash="bdaa78923a650e7974741c69c29122ae"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetListEntries", ListName, ParentKey, GetNull(PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetListEntry">
          <declaration><![CDATA[public override IDataReader GetListEntry(string ListName, string Value)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2852" sc="9" el="2854" ec="10">SqlDataProvider.cs</location>
            <body hash="9877eb07e02e8130c63c85f453775c39"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetListEntry", ListName, Value, -1);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetListEntry">
          <declaration><![CDATA[public override IDataReader GetListEntry(int EntryID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2857" sc="9" el="2859" ec="10">SqlDataProvider.cs</location>
            <body hash="268d4134bc912fb8a475682cad602eee"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetListEntry", "", "", EntryID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetLists">
          <declaration><![CDATA[public override IDataReader GetLists(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2842" sc="9" el="2844" ec="10">SqlDataProvider.cs</location>
            <body hash="4a5ce32fbc4e553783469ec236efa02a"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetLists", PortalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModule">
          <declaration><![CDATA[public override IDataReader GetModule(int ModuleId, int TabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1355" sc="9" el="1357" ec="10">SqlDataProvider.cs</location>
            <body hash="85795af49a97258e65cfbc69a52c255f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModule", ModuleId, GetNull(TabId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleByDefinition">
          <declaration><![CDATA[public override IDataReader GetModuleByDefinition(int PortalId, string FriendlyName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1365" sc="9" el="1367" ec="10">SqlDataProvider.cs</location>
            <body hash="0195ff0fbc9ff4a5155bbbbb273ead3f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleByDefinition", GetNull(PortalId), FriendlyName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleByUniqueID">
          <declaration><![CDATA[public override IDataReader GetModuleByUniqueID(Guid UniqueID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1360" sc="9" el="1362" ec="10">SqlDataProvider.cs</location>
            <body hash="07fd88942dfb593dfddd0db5cc026265"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleByUniqueID", UniqueID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleControl">
          <declaration><![CDATA[public override IDataReader GetModuleControl(int ModuleControlId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1729" sc="9" el="1731" ec="10">SqlDataProvider.cs</location>
            <body hash="6b53742c22981422e957c38ff9e35223"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleControl", ModuleControlId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleControlByKeyAndSrc">
          <declaration><![CDATA[public override IDataReader GetModuleControlByKeyAndSrc(int ModuleDefID, string ControlKey, string ControlSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1739" sc="9" el="1741" ec="10">SqlDataProvider.cs</location>
            <body hash="b54881eb4d6a90805435c2aef8d19e1e"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleControlByKeyAndSrc", GetNull(ModuleDefID), GetNull(ControlKey), GetNull(ControlSrc));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleControls">
          <declaration><![CDATA[public override IDataReader GetModuleControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1724" sc="9" el="1726" ec="10">SqlDataProvider.cs</location>
            <body hash="a870c8ef6a9a74477aae1a036652a914"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleControls");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleControlsByKey">
          <declaration><![CDATA[public override IDataReader GetModuleControlsByKey(string ControlKey, int ModuleDefId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1734" sc="9" el="1736" ec="10">SqlDataProvider.cs</location>
            <body hash="17fd9a7ca1ca447a9f073b55b3204522"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleControlsByKey", GetNull(ControlKey), GetNull(ModuleDefId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleDefinitions">
          <declaration><![CDATA[public override IDataReader GetModuleDefinitions()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1713" sc="9" el="1715" ec="10">SqlDataProvider.cs</location>
            <body hash="39425c400c90f88a6cadff221b720124"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleDefinitions");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModulePackagesInUse">
          <declaration><![CDATA[public override IDataReader GetModulePackagesInUse(int portalID, bool forHost)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3110" sc="9" el="3112" ec="10">SqlDataProvider.cs</location>
            <body hash="e1a93ea697e9975618222b68c61db1f6"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModulePackagesInUse", portalID, forHost);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModulePermission">
          <declaration><![CDATA[public override IDataReader GetModulePermission(int modulePermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2438" sc="9" el="2440" ec="10">SqlDataProvider.cs</location>
            <body hash="18b2ff57dbe411b3ffa5730b743a5910"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModulePermission", modulePermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModulePermissionsByModuleID">
          <declaration><![CDATA[public override IDataReader GetModulePermissionsByModuleID(int moduleID, int PermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2443" sc="9" el="2445" ec="10">SqlDataProvider.cs</location>
            <body hash="15b51d889b3d2b52bc47219b848a79bf"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModulePermissionsByModuleID", moduleID, PermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModulePermissionsByPortal">
          <declaration><![CDATA[public override IDataReader GetModulePermissionsByPortal(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2448" sc="9" el="2450" ec="10">SqlDataProvider.cs</location>
            <body hash="cc3c6ca489eae88c915b06d7fb8512bf"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModulePermissionsByPortal", PortalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModulePermissionsByTabID">
          <declaration><![CDATA[public override IDataReader GetModulePermissionsByTabID(int TabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2453" sc="9" el="2455" ec="10">SqlDataProvider.cs</location>
            <body hash="69d0002e90c17d857705d1fac0afde76"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModulePermissionsByTabID", TabID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModules">
          <declaration><![CDATA[public override IDataReader GetModules(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1340" sc="9" el="1342" ec="10">SqlDataProvider.cs</location>
            <body hash="3f8d15054ebff704c7d65a6309483936"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModules", PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleSetting">
          <declaration><![CDATA[public override IDataReader GetModuleSetting(int ModuleId, string SettingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1535" sc="9" el="1537" ec="10">SqlDataProvider.cs</location>
            <body hash="1f8d2745962447db8d76fdfe3d79d246"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleSetting", ModuleId, SettingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetModuleSettings">
          <declaration><![CDATA[public override IDataReader GetModuleSettings(int ModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1530" sc="9" el="1532" ec="10">SqlDataProvider.cs</location>
            <body hash="e4370e488201c1cddcdca5c6222cc470"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetModuleSettings", ModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetNull">
          <declaration><![CDATA[public override object GetNull(object Field)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="474" sc="9" el="476" ec="10">SqlDataProvider.cs</location>
            <body hash="5e733de7029f908a10963258a75eba29"><![CDATA[{
            return Null.GetNull(Field, DBNull.Value);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackage">
          <declaration><![CDATA[public override IDataReader GetPackage(int packageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3080" sc="9" el="3082" ec="10">SqlDataProvider.cs</location>
            <body hash="ac76e153e8005c8815c90feacc9e6e47"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPackage", packageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageByName">
          <declaration><![CDATA[public override IDataReader GetPackageByName(int portalID, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3085" sc="9" el="3087" ec="10">SqlDataProvider.cs</location>
            <body hash="ba5a2ba872addc54e63fe3930a0cf3b3"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPackageByName", GetNull(portalID), name);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackages">
          <declaration><![CDATA[public override IDataReader GetPackages(int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3090" sc="9" el="3092" ec="10">SqlDataProvider.cs</location>
            <body hash="43e6519dd05d67793d11749c2e22fb59"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPackages", GetNull(portalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackagesByType">
          <declaration><![CDATA[public override IDataReader GetPackagesByType(int portalID, string type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3095" sc="9" el="3097" ec="10">SqlDataProvider.cs</location>
            <body hash="bd92a29f723fbe9d39e3b06ca0245a4b"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPackagesByType", GetNull(portalID), type);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageType">
          <declaration><![CDATA[public override IDataReader GetPackageType(string type)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3100" sc="9" el="3102" ec="10">SqlDataProvider.cs</location>
            <body hash="9adc66aea12e49459806f09ca5aeaaae"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPackageType", type);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPackageTypes">
          <declaration><![CDATA[public override IDataReader GetPackageTypes()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3105" sc="9" el="3107" ec="10">SqlDataProvider.cs</location>
            <body hash="ac68baa43fda8a88303404a23a6d77e2"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPackageTypes");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermission">
          <declaration><![CDATA[public override IDataReader GetPermission(int permissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2410" sc="9" el="2412" ec="10">SqlDataProvider.cs</location>
            <body hash="b2c1b5b998e2f4f8bb004cf3d765bbda"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermission", permissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionByCodeAndKey">
          <declaration><![CDATA[public override IDataReader GetPermissionByCodeAndKey(string PermissionCode, string PermissionKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2400" sc="9" el="2402" ec="10">SqlDataProvider.cs</location>
            <body hash="49ea702fa432df92752a3053d1f018e0"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermissionByCodeAndKey", GetNull(PermissionCode), GetNull(PermissionKey));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByFolder">
          <declaration><![CDATA[public override IDataReader GetPermissionsByFolder()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2395" sc="9" el="2397" ec="10">SqlDataProvider.cs</location>
            <body hash="35ee568e15ccd3e1438854d9cf6dfecd"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermissionsByFolder");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByModuleDefID">
          <declaration><![CDATA[public override IDataReader GetPermissionsByModuleDefID(int ModuleDefID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2380" sc="9" el="2382" ec="10">SqlDataProvider.cs</location>
            <body hash="fec4224c0de0b8b8bd0810c9f2d59dbe"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermissionsByModuleDefID", ModuleDefID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByModuleID">
          <declaration><![CDATA[public override IDataReader GetPermissionsByModuleID(int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2385" sc="9" el="2387" ec="10">SqlDataProvider.cs</location>
            <body hash="2d838f04fe39a3b5f6c36dd65d9fa438"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermissionsByModuleID", ModuleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByPortalDesktopModule">
          <declaration><![CDATA[public override IDataReader GetPermissionsByPortalDesktopModule()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2390" sc="9" el="2392" ec="10">SqlDataProvider.cs</location>
            <body hash="a786713396f98256bc13467f0873887d"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermissionsByPortalDesktopModule");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPermissionsByTab">
          <declaration><![CDATA[public override IDataReader GetPermissionsByTab()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2405" sc="9" el="2407" ec="10">SqlDataProvider.cs</location>
            <body hash="aa2cd836cfe09964f7960351bf4df678"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPermissionsByTab");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortal">
          <declaration><![CDATA[public override IDataReader GetPortal(int PortalId, string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="966" sc="9" el="968" ec="10">SqlDataProvider.cs</location>
            <body hash="a87bdea9a0012d0ac42f474d853a3ebf"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortal", PortalId, CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalAlias">
          <declaration><![CDATA[public override IDataReader GetPortalAlias(string PortalAlias, int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2911" sc="9" el="2913" ec="10">SqlDataProvider.cs</location>
            <body hash="298c6668568ec337602e1885caa31a8a"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalAlias", PortalAlias, PortalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalAliasByPortalAliasID">
          <declaration><![CDATA[public override IDataReader GetPortalAliasByPortalAliasID(int PortalAliasID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2946" sc="9" el="2948" ec="10">SqlDataProvider.cs</location>
            <body hash="e73d0f4763bb2515ddcbefe150d11058"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalAliasByPortalAliasID", PortalAliasID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalAliasByPortalID">
          <declaration><![CDATA[public override IDataReader GetPortalAliasByPortalID(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2941" sc="9" el="2943" ec="10">SqlDataProvider.cs</location>
            <body hash="e193d4c3e245b48814de83bc20714b87"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalAliasByPortalID", PortalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalByAlias">
          <declaration><![CDATA[public override IDataReader GetPortalByAlias(string PortalAlias)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="971" sc="9" el="973" ec="10">SqlDataProvider.cs</location>
            <body hash="95bcce0e5e934c1793e5287df8486fc4"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalByAlias", PortalAlias);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalByPortalAliasID">
          <declaration><![CDATA[public override IDataReader GetPortalByPortalAliasID(int PortalAliasId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2916" sc="9" el="2918" ec="10">SqlDataProvider.cs</location>
            <body hash="ca1662d7a929f095ae62955804bd8c90"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalByPortalAliasID", PortalAliasId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalByTab">
          <declaration><![CDATA[public override IDataReader GetPortalByTab(int TabId, string PortalAlias)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="976" sc="9" el="978" ec="10">SqlDataProvider.cs</location>
            <body hash="04dd222534c3cdb62032bab36ad1aaf4"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalByTab", TabId, PortalAlias);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalCount">
          <declaration><![CDATA[public override int GetPortalCount()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="981" sc="9" el="983" ec="10">SqlDataProvider.cs</location>
            <body hash="f98c01240a54c9ee58f05749b3eb1e97"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalCount"));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalDefaultLanguage">
          <declaration><![CDATA[public override string GetPortalDefaultLanguage(int portalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3210" sc="9" el="3212" ec="10">SqlDataProvider.cs</location>
            <body hash="a0f7f5e9d28073a64198b392d587ab1c"><![CDATA[{
            return Convert.ToString(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalDefaultLanguage", portalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalDesktopModules">
          <declaration><![CDATA[public override IDataReader GetPortalDesktopModules(int PortalId, int DesktopModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1697" sc="9" el="1699" ec="10">SqlDataProvider.cs</location>
            <body hash="5981e621323859c8b03443dd0dca1d0f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalDesktopModules", GetNull(PortalId), GetNull(DesktopModuleId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortals">
          <declaration><![CDATA[public override IDataReader GetPortals(string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="986" sc="9" el="997" ec="10">SqlDataProvider.cs</location>
            <body hash="1fe5097dc433c5e6ae9c7cecfc9d2324"><![CDATA[{
            IDataReader reader;
            if (Globals.Status == Globals.UpgradeStatus.Upgrade && Globals.DataBaseVersion < new Version(6,1,0))
            {
                reader = (IDataReader)SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortals");
            }
            else
            {
                reader = (IDataReader)SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortals", CultureCode);
            }
            return reader;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalsByName">
          <declaration><![CDATA[public override IDataReader GetPortalsByName(string nameToMatch, int pageIndex, int pageSize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1000" sc="9" el="1002" ec="10">SqlDataProvider.cs</location>
            <body hash="4a577a2bd49041dfeaf57d2553e7bf31"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalsByName", nameToMatch, pageIndex, pageSize);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalSettings">
          <declaration><![CDATA[public override IDataReader GetPortalSettings(int PortalId, string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1005" sc="9" el="1007" ec="10">SqlDataProvider.cs</location>
            <body hash="8e476533b9230c8da9725c269a62abcb"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalSettings", PortalId, CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalSpaceUsed">
          <declaration><![CDATA[public override IDataReader GetPortalSpaceUsed(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1010" sc="9" el="1012" ec="10">SqlDataProvider.cs</location>
            <body hash="6dca29798c9fd81479566d6fca7646d4"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPortalSpaceUsed", GetNull(PortalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPortalTabModules">
          <declaration><![CDATA[public override IDataReader GetPortalTabModules(int portalId, int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1319" sc="9" el="1321" ec="10">SqlDataProvider.cs</location>
            <body hash="5951aa3dc8fcc5044cb2b0260db5bdcb"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabModules", tabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPreviewProfiles">
          <declaration><![CDATA[public override IDataReader GetPreviewProfiles(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3310" sc="3" el="3312" ec="4">SqlDataProvider.cs</location>
            <body hash="56d0678e55fbe2134e614f0a820b7fe3"><![CDATA[{
			return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_GetPreviewProfiles", portalId);
		}]]></body>
          </codeblock>
        </method>
        <method name="GetProfile">
          <declaration><![CDATA[public override IDataReader GetProfile(int UserId, int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2229" sc="9" el="2231" ec="10">SqlDataProvider.cs</location>
            <body hash="c58583785076738c081242b5ee71dd47"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetProfile", UserId, PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPropertyDefinition">
          <declaration><![CDATA[public override IDataReader GetPropertyDefinition(int definitionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2289" sc="9" el="2291" ec="10">SqlDataProvider.cs</location>
            <body hash="5d143e50be683ca4e449fef1b72f6344"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPropertyDefinition", definitionId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPropertyDefinitionByName">
          <declaration><![CDATA[public override IDataReader GetPropertyDefinitionByName(int portalId, string name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2294" sc="9" el="2296" ec="10">SqlDataProvider.cs</location>
            <body hash="264b0730f03f8d801bff7d1268f1efa0"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPropertyDefinitionByName", GetNull(portalId), name);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetPropertyDefinitionsByPortal">
          <declaration><![CDATA[public override IDataReader GetPropertyDefinitionsByPortal(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2299" sc="9" el="2301" ec="10">SqlDataProvider.cs</location>
            <body hash="1039f2a92a8e68923812952a30544f19"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetPropertyDefinitionsByPortal", GetNull(portalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetProviderPath">
          <declaration><![CDATA[public override string GetProviderPath()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="754" sc="9" el="777" ec="10">SqlDataProvider.cs</location>
            <body hash="b8e818448115e73ff6404e23aa49d123"><![CDATA[{
            string path = ProviderPath;
            if (!String.IsNullOrEmpty(path))
            {
                path = HostingEnvironment.MapPath(path);

                if (Directory.Exists(path))
                {
                    if (!IsConnectionValid)
                    {
                        path = "ERROR: Could not connect to database specified in connectionString for SqlDataProvider";
                    }
                }
                else
                {
                    path = "ERROR: providerPath folder " + path + " specified for SqlDataProvider does not exist on web server";
                }
            }
            else
            {
                path = "ERROR: providerPath folder value not specified in web.config for SqlDataProvider";
            }
            return path;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRedirectionRules">
          <declaration><![CDATA[public override IDataReader GetRedirectionRules(int redirectionId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3325" sc="3" el="3327" ec="4">SqlDataProvider.cs</location>
            <body hash="e1af50d0ebb7a4b26c9923d2b6f133bd"><![CDATA[{
			return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_GetRedirectionRules", redirectionId);
		}]]></body>
          </codeblock>
        </method>
        <method name="GetRedirections">
          <declaration><![CDATA[public override IDataReader GetRedirections(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3320" sc="9" el="3322" ec="10">SqlDataProvider.cs</location>
            <body hash="7bae509e89baf11a49c5138e43f646bf"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_GetRedirections", portalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetRoleNull">
          <declaration><![CDATA[private object GetRoleNull(int RoleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="225" sc="9" el="234" ec="10">SqlDataProvider.cs</location>
            <body hash="b9b6ce53a577123bc041abe863282896"><![CDATA[{
            if (RoleID.ToString() == Globals.glbRoleNothing)
            {
                return DBNull.Value;
            }
            else
            {
                return RoleID;
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchCommonWordsByLocale">
          <declaration><![CDATA[public override IDataReader GetSearchCommonWordsByLocale(string Locale)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2771" sc="9" el="2773" ec="10">SqlDataProvider.cs</location>
            <body hash="008ce0e45cfb3abc49cb74d9809a98f1"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchCommonWordsByLocale", Locale);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchIndexers">
          <declaration><![CDATA[public override IDataReader GetSearchIndexers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2731" sc="9" el="2733" ec="10">SqlDataProvider.cs</location>
            <body hash="80a721ce6f7599e56ea9f6a3462f7758"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchIndexers");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchItem">
          <declaration><![CDATA[public override IDataReader GetSearchItem(int ModuleID, string SearchKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2821" sc="9" el="2823" ec="10">SqlDataProvider.cs</location>
            <body hash="9b139ff30335904964820dad40ba7c46"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchItem", GetNull(ModuleID), SearchKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchItems">
          <declaration><![CDATA[public override IDataReader GetSearchItems(int PortalID, int TabID, int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2811" sc="9" el="2813" ec="10">SqlDataProvider.cs</location>
            <body hash="4e3a3afde6b9e67e24b0969c7fe7b2b0"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchItems", GetNull(PortalID), GetNull(TabID), GetNull(ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchModules">
          <declaration><![CDATA[public override IDataReader GetSearchModules(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1525" sc="9" el="1527" ec="10">SqlDataProvider.cs</location>
            <body hash="01cb74926621461eda64cddaf1f30414"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchModules", PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchResultModules">
          <declaration><![CDATA[public override IDataReader GetSearchResultModules(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2736" sc="9" el="2738" ec="10">SqlDataProvider.cs</location>
            <body hash="867207ce9760101b2896f185b44ae403"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchResultModules", PortalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchResults">
          <declaration><![CDATA[public override IDataReader GetSearchResults(int PortalID, string Word)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2806" sc="9" el="2808" ec="10">SqlDataProvider.cs</location>
            <body hash="2578e9fdc41e803bf9ef0effe1a85eac"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchResultsByWord", PortalID, Word);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchResults">
          <declaration><![CDATA[public override IDataReader GetSearchResults(int PortalID, int TabID, int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2816" sc="9" el="2818" ec="10">SqlDataProvider.cs</location>
            <body hash="a4d8d7c68a699c8e30b5a3e592c65710"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchResults", GetNull(PortalID), GetNull(TabID), GetNull(ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchSettings">
          <declaration><![CDATA[public override IDataReader GetSearchSettings(int ModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2781" sc="9" el="2783" ec="10">SqlDataProvider.cs</location>
            <body hash="a7d3777d06908572b84a6dafdd27171c"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchSettings", ModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSearchWords">
          <declaration><![CDATA[public override IDataReader GetSearchWords()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2786" sc="9" el="2788" ec="10">SqlDataProvider.cs</location>
            <body hash="17623057f4bcc17ac1c1e4cfb322e3a1"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSearchWords");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetServerConfiguration">
          <declaration><![CDATA[public override IDataReader GetServerConfiguration()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="889" sc="9" el="891" ec="10">SqlDataProvider.cs</location>
            <body hash="1aabe654b0f7c749e9ca8e44e9c4af8e"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetServerConfiguration");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetServers">
          <declaration><![CDATA[public override IDataReader GetServers()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="884" sc="9" el="886" ec="10">SqlDataProvider.cs</location>
            <body hash="6051b1373867db31900d0be42aed0697"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetServers");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSiteLog">
          <declaration><![CDATA[public override IDataReader GetSiteLog(int PortalId, string PortalAlias, string ReportName, DateTime StartDate, DateTime EndDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1945" sc="9" el="1947" ec="10">SqlDataProvider.cs</location>
            <body hash="892d825aea56359fb442069bb45ea4b6"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + ReportName, PortalId, PortalAlias, StartDate, EndDate);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSiteLogReports">
          <declaration><![CDATA[public override IDataReader GetSiteLogReports()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1950" sc="9" el="1952" ec="10">SqlDataProvider.cs</location>
            <body hash="687de263720b2a00d0a4d107efa205c5"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSiteLogReports");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkinByPackageID">
          <declaration><![CDATA[public override IDataReader GetSkinByPackageID(int packageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2204" sc="9" el="2206" ec="10">SqlDataProvider.cs</location>
            <body hash="23e23a657c824bcc311d431d5004dbb4"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSkinPackageByPackageID", packageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkinControl">
          <declaration><![CDATA[public override IDataReader GetSkinControl(int skinControlID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1809" sc="9" el="1811" ec="10">SqlDataProvider.cs</location>
            <body hash="7e1e725aadeb6f913302c797b8333342"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSkinControl", skinControlID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkinControlByKey">
          <declaration><![CDATA[public override IDataReader GetSkinControlByKey(string controlKey)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1814" sc="9" el="1816" ec="10">SqlDataProvider.cs</location>
            <body hash="fd84819d79e7345766a661df5584fa77"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSkinControlByKey", controlKey);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkinControlByPackageID">
          <declaration><![CDATA[public override IDataReader GetSkinControlByPackageID(int packageID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1819" sc="9" el="1821" ec="10">SqlDataProvider.cs</location>
            <body hash="1c8562b1ac8811a62a8e4b547a7fbfca"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSkinControlByPackageID", packageID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkinControls">
          <declaration><![CDATA[public override IDataReader GetSkinControls()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1804" sc="9" el="1806" ec="10">SqlDataProvider.cs</location>
            <body hash="ec3bf0e815d712ca5ef901ffbf002eea"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSkinControls");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetSkinPackage">
          <declaration><![CDATA[public override IDataReader GetSkinPackage(int portalID, string skinName, string skinType)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2209" sc="9" el="2211" ec="10">SqlDataProvider.cs</location>
            <body hash="a3a8dcb3ce87385077bf1fe0bbf73074"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetSkinPackage", GetNull(portalID), skinName, skinType);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTab">
          <declaration><![CDATA[public override IDataReader GetTab(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1279" sc="9" el="1281" ec="10">SqlDataProvider.cs</location>
            <body hash="868ba85e2120ac14c97f72638ef3a948"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTab", tabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabByName">
          <declaration><![CDATA[public override IDataReader GetTabByName(string tabName, int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1289" sc="9" el="1291" ec="10">SqlDataProvider.cs</location>
            <body hash="1bce739b7dbf3ad89bb61beec66ca386"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabByName", tabName, GetNull(portalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabByUniqueID">
          <declaration><![CDATA[public override IDataReader GetTabByUniqueID(Guid uniqueId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1284" sc="9" el="1286" ec="10">SqlDataProvider.cs</location>
            <body hash="8804275ee8f376ece7d1f2121f0aff70"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabByUniqueID", uniqueId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabCount">
          <declaration><![CDATA[public override int GetTabCount(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1294" sc="9" el="1296" ec="10">SqlDataProvider.cs</location>
            <body hash="80645bb68968ac934b7094c652f0237e"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabCount", portalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTables">
          <declaration><![CDATA[public override IDataReader GetTables()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1961" sc="9" el="1963" ec="10">SqlDataProvider.cs</location>
            <body hash="57254db6e2766180113f0748b2683abb"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTables");
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModule">
          <declaration><![CDATA[public override IDataReader GetTabModule(int tabModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1324" sc="9" el="1326" ec="10">SqlDataProvider.cs</location>
            <body hash="f297855dab33fe86a785f840beb0e8e0"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabModule", tabModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModuleOrder">
          <declaration><![CDATA[public override IDataReader GetTabModuleOrder(int TabId, string PaneName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1406" sc="9" el="1408" ec="10">SqlDataProvider.cs</location>
            <body hash="c7838f4029b1dd9fe0435d28e602f58d"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabModuleOrder", TabId, PaneName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModules">
          <declaration><![CDATA[public override IDataReader GetTabModules(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1329" sc="9" el="1331" ec="10">SqlDataProvider.cs</location>
            <body hash="5951aa3dc8fcc5044cb2b0260db5bdcb"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabModules", tabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModuleSetting">
          <declaration><![CDATA[public override IDataReader GetTabModuleSetting(int TabModuleId, string SettingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1595" sc="9" el="1597" ec="10">SqlDataProvider.cs</location>
            <body hash="b26e371eb120e4f48bdbb80b6dbac033"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabModuleSetting", TabModuleId, SettingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabModuleSettings">
          <declaration><![CDATA[public override IDataReader GetTabModuleSettings(int TabModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1590" sc="9" el="1592" ec="10">SqlDataProvider.cs</location>
            <body hash="e1776cb3c5bb7518a77dd0345887ad01"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabModuleSettings", TabModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabPanes">
          <declaration><![CDATA[public override IDataReader GetTabPanes(int tabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1314" sc="9" el="1316" ec="10">SqlDataProvider.cs</location>
            <body hash="282ec17338dbdcdbd9d3546dc1bb036a"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabPanes", tabId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabPaths">
          <declaration><![CDATA[public override IDataReader GetTabPaths(int portalId, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1274" sc="9" el="1276" ec="10">SqlDataProvider.cs</location>
            <body hash="0375ba1cd1a12454f34bed58154d0ff3"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabPaths", GetNull(portalId), cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabPermissionsByPortal">
          <declaration><![CDATA[public override IDataReader GetTabPermissionsByPortal(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2499" sc="9" el="2501" ec="10">SqlDataProvider.cs</location>
            <body hash="8a12c9a06a4c1a386d2684bcc96614a3"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabPermissionsByPortal", GetNull(PortalID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabPermissionsByTabID">
          <declaration><![CDATA[public override IDataReader GetTabPermissionsByTabID(int TabID, int PermissionID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2504" sc="9" el="2506" ec="10">SqlDataProvider.cs</location>
            <body hash="faa77c1fec30cbccbe87440c25207a11"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabPermissionsByTabID", TabID, PermissionID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabs">
          <declaration><![CDATA[public override IDataReader GetTabs(int portalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1264" sc="9" el="1266" ec="10">SqlDataProvider.cs</location>
            <body hash="a2388021fcab121f887e5d34a0cf12c6"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabs", GetNull(portalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsByModuleID">
          <declaration><![CDATA[public override IDataReader GetTabsByModuleID(int moduleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1304" sc="9" el="1306" ec="10">SqlDataProvider.cs</location>
            <body hash="c66c272930bb6b401e1dca055df6dde3"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabsByModuleID", moduleID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsByPackageID">
          <declaration><![CDATA[public override IDataReader GetTabsByPackageID(int portalID, int packageID, bool forHost)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1309" sc="9" el="1311" ec="10">SqlDataProvider.cs</location>
            <body hash="4131ef3d9db726f7b9ea5bdfcb78c0fe"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabsByPackageID", GetNull(portalID), packageID, forHost);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabsByParentId">
          <declaration><![CDATA[public override IDataReader GetTabsByParentId(int parentId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1299" sc="9" el="1301" ec="10">SqlDataProvider.cs</location>
            <body hash="467868e7edc39683a2344e2da110e1ff"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabsByParentId", parentId);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabSetting">
          <declaration><![CDATA[public override IDataReader GetTabSetting(int TabID, string SettingName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1565" sc="9" el="1567" ec="10">SqlDataProvider.cs</location>
            <body hash="ba91c37d0819680149a3438058c57de4"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabSetting", TabID, SettingName);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTabSettings">
          <declaration><![CDATA[public override IDataReader GetTabSettings(int TabID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1560" sc="9" el="1562" ec="10">SqlDataProvider.cs</location>
            <body hash="c7ba0b47f76c781a12903184869cb1af"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetTabSettings", TabID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetTransaction">
          <declaration><![CDATA[public override DbTransaction GetTransaction()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="531" sc="9" el="536" ec="10">SqlDataProvider.cs</location>
            <body hash="1cf9da090e1effd98a0f8ffeb427afb4"><![CDATA[{
            var Conn = new SqlConnection(UpgradeConnectionString);
            Conn.Open();
            SqlTransaction transaction = Conn.BeginTransaction();
            return transaction;
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrl">
          <declaration><![CDATA[public override IDataReader GetUrl(int PortalID, string Url)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2330" sc="9" el="2332" ec="10">SqlDataProvider.cs</location>
            <body hash="000a4c1f1147122fe33980c7ecd33c64"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetUrl", PortalID, Url);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrlLog">
          <declaration><![CDATA[public override IDataReader GetUrlLog(int UrlTrackingID, DateTime StartDate, DateTime EndDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2370" sc="9" el="2372" ec="10">SqlDataProvider.cs</location>
            <body hash="58494b1d2e5fb55b1ff892430a758af7"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetUrlLog", UrlTrackingID, GetNull(StartDate), GetNull(EndDate));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrls">
          <declaration><![CDATA[public override IDataReader GetUrls(int PortalID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2325" sc="9" el="2327" ec="10">SqlDataProvider.cs</location>
            <body hash="7b375b4bf8d0be099aa7e6b148e1d532"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetUrls", PortalID);
        }]]></body>
          </codeblock>
        </method>
        <method name="GetUrlTracking">
          <declaration><![CDATA[public override IDataReader GetUrlTracking(int PortalID, string Url, int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2345" sc="9" el="2347" ec="10">SqlDataProvider.cs</location>
            <body hash="6631d5a7fe5e7122df41c56508f3b958"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetUrlTracking", PortalID, Url, GetNull(ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetVendor">
          <declaration><![CDATA[public override IDataReader GetVendor(int VendorId, int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1988" sc="9" el="1990" ec="10">SqlDataProvider.cs</location>
            <body hash="1e7027877d69d6220a8945eaa4480c7c"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetVendor", VendorId, GetNull(PortalId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetVendorClassifications">
          <deprecation>Obsoleted in 6.0.0, the Vendor Classifications feature was never fully implemented and will be removed from the API</deprecation>
          <declaration><![CDATA[public override IDataReader GetVendorClassifications(int VendorId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2052" sc="9" el="2054" ec="10">SqlDataProvider.cs</location>
            <body hash="80d6f27f45695fd6a305adab81b5644b"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetVendorClassifications", GetNull(VendorId));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetVendors">
          <declaration><![CDATA[public override IDataReader GetVendors(int PortalId, bool UnAuthorized, int PageIndex, int PageSize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1973" sc="9" el="1975" ec="10">SqlDataProvider.cs</location>
            <body hash="4cb2a36480ef04cb36ec7de98ccef83b"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetVendors", GetNull(PortalId), UnAuthorized, GetNull(PageSize), GetNull(PageIndex));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetVendorsByEmail">
          <declaration><![CDATA[public override IDataReader GetVendorsByEmail(string Filter, int PortalId, int PageIndex, int PageSize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1978" sc="9" el="1980" ec="10">SqlDataProvider.cs</location>
            <body hash="031855c64aa2e4263693ec313862b4f0"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetVendorsByEmail", Filter, GetNull(PortalId), GetNull(PageSize), GetNull(PageIndex));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetVendorsByName">
          <declaration><![CDATA[public override IDataReader GetVendorsByName(string Filter, int PortalId, int PageIndex, int PageSize)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1983" sc="9" el="1985" ec="10">SqlDataProvider.cs</location>
            <body hash="6dae97722cb4ea7b727b8a9bf2f5c625"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "GetVendorsByName", Filter, GetNull(PortalId), GetNull(PageSize), GetNull(PageIndex));
        }]]></body>
          </codeblock>
        </method>
        <method name="GetVersion">
          <declaration><![CDATA[public override Version GetVersion()]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="722" sc="9" el="751" ec="10">SqlDataProvider.cs</location>
            <body hash="b458fc9a7b655a5d9b58d5bc668dc159"><![CDATA[{
            Version version = null;
            try
            {
                IDataReader dr = GetDatabaseVersion();
                if (dr.Read())
                {
                    version = new Version(Convert.ToInt32(dr["Major"]), Convert.ToInt32(dr["Minor"]), Convert.ToInt32(dr["Build"]));
                }
            }
            catch (SqlException ex)
            {
                bool noStoredProc = false;
                for (int i = 0; i <= ex.Errors.Count - 1; i++)
                {
                    SqlError sqlError = ex.Errors[i];
                    if (sqlError.Number == 2812 && sqlError.Class == 16) //2812 - 16 means SP could not be found
                    {
                        noStoredProc = true;
                        break;
                    }
                }

                if (!noStoredProc)
                {
                    throw;
                }
            }
            return version;
        }]]></body>
          </codeblock>
        </method>
        <method name="GrantStoredProceduresPermission">
          <declaration><![CDATA[private string GrantStoredProceduresPermission(string Permission, string LoginOrRole)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="265" sc="9" el="301" ec="10">SqlDataProvider.cs</location>
            <body hash="16a7eb0e7b5fda08807ac35127e9d8a1"><![CDATA[{
            string SQL = string.Empty;
            string Exceptions = string.Empty;

            try
            {
                //grant rights to a login or role for all stored procedures
                SQL += "if exists (select * from dbo.sysusers where name='" + LoginOrRole + "')";
                SQL += "  begin";
                SQL += "    declare @exec nvarchar(2000) ";
                SQL += "    declare @name varchar(150) ";
                SQL += "    declare sp_cursor cursor for select o.name as name ";
                SQL += "    from dbo.sysobjects o ";
                SQL += "    where ( OBJECTPROPERTY(o.id, N'IsProcedure') = 1 or OBJECTPROPERTY(o.id, N'IsExtendedProc') = 1 or OBJECTPROPERTY(o.id, N'IsReplProc') = 1 ) ";
                SQL += "    and OBJECTPROPERTY(o.id, N'IsMSShipped') = 0 ";
                SQL += "    and o.name not like N'#%%' ";
                SQL += "    and (left(o.name,len('" + ObjectQualifier + "')) = '" + ObjectQualifier + "' or left(o.name,7) = 'aspnet_') ";
                SQL += "    open sp_cursor ";
                SQL += "    fetch sp_cursor into @name ";
                SQL += "    while @@fetch_status >= 0 ";
                SQL += "      begin";
                SQL += "        select @exec = 'grant " + Permission + " on [' +  @name  + '] to [" + LoginOrRole + "]'";
                SQL += "        execute (@exec)";
                SQL += "        fetch sp_cursor into @name ";
                SQL += "      end ";
                SQL += "    deallocate sp_cursor";
                SQL += "  end ";
                SqlHelper.ExecuteNonQuery(UpgradeConnectionString, CommandType.Text, SQL);
            }
            catch (SqlException objException)
            {
                DnnLog.Debug(objException);

                Exceptions += objException + Environment.NewLine + Environment.NewLine + SQL + Environment.NewLine + Environment.NewLine;
            }
            return Exceptions;
        }]]></body>
          </codeblock>
        </method>
        <method name="GrantUserDefinedFunctionsPermission">
          <declaration><![CDATA[private string GrantUserDefinedFunctionsPermission(string ScalarPermission, string TablePermission, string LoginOrRole)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="304" sc="9" el="350" ec="10">SqlDataProvider.cs</location>
            <body hash="acd40e903b9d401221cef93102d846eb"><![CDATA[{
            string SQL = string.Empty;
            string Exceptions = string.Empty;
            try
            {
                //grant EXECUTE rights to a login or role for all functions
                SQL += "if exists (select * from dbo.sysusers where name='" + LoginOrRole + "')";
                SQL += "  begin";
                SQL += "    declare @exec nvarchar(2000) ";
                SQL += "    declare @name varchar(150) ";
                SQL += "    declare @isscalarfunction int ";
                SQL += "    declare @istablefunction int ";
                SQL += "    declare sp_cursor cursor for select o.name as name, OBJECTPROPERTY(o.id, N'IsScalarFunction') as IsScalarFunction ";
                SQL += "    from dbo.sysobjects o ";
                SQL += "    where ( OBJECTPROPERTY(o.id, N'IsScalarFunction') = 1 OR OBJECTPROPERTY(o.id, N'IsTableFunction') = 1 ) ";
                SQL += "      and OBJECTPROPERTY(o.id, N'IsMSShipped') = 0 ";
                SQL += "      and o.name not like N'#%%' ";
                SQL += "      and (left(o.name,len('" + ObjectQualifier + "')) = '" + ObjectQualifier + "' or left(o.name,7) = 'aspnet_') ";
                SQL += "    open sp_cursor ";
                SQL += "    fetch sp_cursor into @name, @isscalarfunction ";
                SQL += "    while @@fetch_status >= 0 ";
                SQL += "      begin ";
                SQL += "        if @IsScalarFunction = 1 ";
                SQL += "          begin";
                SQL += "            select @exec = 'grant " + ScalarPermission + " on [' +  @name  + '] to [" + LoginOrRole + "]'";
                SQL += "            execute (@exec)";
                SQL += "            fetch sp_cursor into @name, @isscalarfunction  ";
                SQL += "          end ";
                SQL += "        else ";
                SQL += "          begin";
                SQL += "            select @exec = 'grant " + TablePermission + " on [' +  @name  + '] to [" + LoginOrRole + "]'";
                SQL += "            execute (@exec)";
                SQL += "            fetch sp_cursor into @name, @isscalarfunction  ";
                SQL += "          end ";
                SQL += "      end ";
                SQL += "    deallocate sp_cursor";
                SQL += "  end ";
                SqlHelper.ExecuteNonQuery(UpgradeConnectionString, CommandType.Text, SQL);
            }
            catch (SqlException objException)
            {
                DnnLog.Debug(objException);

                Exceptions += objException + Environment.NewLine + Environment.NewLine + SQL + Environment.NewLine + Environment.NewLine;
            }
            return Exceptions;
        }]]></body>
          </codeblock>
        </method>
        <method name="LocalizeTab">
          <declaration><![CDATA[public override void LocalizeTab(int tabId, string cultureCode, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1192" sc="9" el="1194" ec="10">SqlDataProvider.cs</location>
            <body hash="4d987dd982643b311a71feaa3eba8621"><![CDATA[{
            ExecuteNonQuery("LocalizeTab", tabId, cultureCode, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveTabAfter">
          <declaration><![CDATA[public override void MoveTabAfter(int tabId, int afterTabId, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1197" sc="9" el="1199" ec="10">SqlDataProvider.cs</location>
            <body hash="692db2bd9f3a621366c640693c34b04f"><![CDATA[{
            ExecuteNonQuery("MoveTabAfter", tabId, afterTabId, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveTabBefore">
          <declaration><![CDATA[public override void MoveTabBefore(int tabId, int beforeTabId, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1202" sc="9" el="1204" ec="10">SqlDataProvider.cs</location>
            <body hash="8183ac3474259fa90a5d8ba71320c80a"><![CDATA[{
            ExecuteNonQuery("MoveTabBefore", tabId, beforeTabId, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveTabModule">
          <declaration><![CDATA[public override void MoveTabModule(int fromTabId, int moduleId, int toTabId, string toPaneName, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1458" sc="9" el="1460" ec="10">SqlDataProvider.cs</location>
            <body hash="8df815ca33b2f685a0695951634ff64b"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "MoveTabModule", fromTabId, moduleId, toTabId, toPaneName, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="MoveTabToParent">
          <declaration><![CDATA[public override void MoveTabToParent(int tabId, int parentId, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1207" sc="9" el="1209" ec="10">SqlDataProvider.cs</location>
            <body hash="49e3376c7ad34d45572af897465fbeaa"><![CDATA[{
            ExecuteNonQuery("MoveTabToParent", tabId, GetNull(parentId), lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="RegisterAssembly">
          <declaration><![CDATA[public override int RegisterAssembly(int packageID, string assemblyName, string version)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3115" sc="9" el="3117" ec="10">SqlDataProvider.cs</location>
            <body hash="1d3e8cdb631970ff8b22ab9814513414"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "RegisterAssembly", packageID, assemblyName, version));
        }]]></body>
          </codeblock>
        </method>
        <method name="RestoreTabModule">
          <declaration><![CDATA[public override void RestoreTabModule(int TabId, int ModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1463" sc="9" el="1465" ec="10">SqlDataProvider.cs</location>
            <body hash="36152c9d6e50478a1788d30cd9fef7f2"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "RestoreTabModule", TabId, ModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="RollbackTransaction">
          <declaration><![CDATA[public override void RollbackTransaction(DbTransaction transaction)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="539" sc="9" el="551" ec="10">SqlDataProvider.cs</location>
            <body hash="59f9920f5eb5f222e0fd6e4c9c258672"><![CDATA[{
            try
            {
                transaction.Rollback();
            }
            finally
            {
                if (transaction != null && transaction.Connection != null)
                {
                    transaction.Connection.Close();
                }
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="SavePreviewProfile">
          <declaration><![CDATA[public override int SavePreviewProfile(int id, int portalId, string name, int width, int height, string userAgent, int sortOrder, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3340" sc="3" el="3342" ec="4">SqlDataProvider.cs</location>
            <body hash="be21f9886b301660b3ec2a2b8362ce99"><![CDATA[{
			return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_SavePreviewProfile", id, portalId, name, width, height, userAgent, sortOrder, userId));
		}]]></body>
          </codeblock>
        </method>
        <method name="SaveRedirection">
          <declaration><![CDATA[public override int SaveRedirection(int id, int portalId, string name, int type, int sortOrder, int sourceTabId, bool includeChildTabs, int targetType, object targetValue, bool enabled, int userId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3330" sc="3" el="3332" ec="4">SqlDataProvider.cs</location>
            <body hash="7051e8464b5fa565be7257c843d9b803"><![CDATA[{
			return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_SaveRedirection", id, portalId, name, type, sortOrder, sourceTabId, includeChildTabs, targetType, targetValue, enabled, userId));
		}]]></body>
          </codeblock>
        </method>
        <method name="SaveRedirectionRule">
          <declaration><![CDATA[public override void SaveRedirectionRule(int id, int redirectionId, string capbility, string expression)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3335" sc="3" el="3337" ec="4">SqlDataProvider.cs</location>
            <body hash="ac02b727bfc72779c1c201a4abae7715"><![CDATA[{
			SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "Mobile_SaveRedirectionRule", id, redirectionId, capbility, expression);
		}]]></body>
          </codeblock>
        </method>
        <method name="SetEventMessageComplete">
          <declaration><![CDATA[public override void SetEventMessageComplete(int eventMessageId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2980" sc="9" el="2982" ec="10">SqlDataProvider.cs</location>
            <body hash="4cf3868a02c98b9078583356c5d468c3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "SetEventMessageComplete", eventMessageId);
        }]]></body>
          </codeblock>
        </method>
        <method name="TestDatabaseConnection">
          <declaration><![CDATA[public override string TestDatabaseConnection(DbConnectionStringBuilder builder, string Owner, string Qualifier)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="780" sc="9" el="842" ec="10">SqlDataProvider.cs</location>
            <body hash="599c247c3af465d196a5a4c63b55f08a"><![CDATA[{
            var sqlBuilder = builder as SqlConnectionStringBuilder;
            string connectionString = Null.NullString;
            if (sqlBuilder != null)
            {
                connectionString = sqlBuilder.ToString();
                IDataReader dr = null;
                try
                {
                    dr = SqlHelper.ExecuteReader(connectionString, Owner + Qualifier + "GetDatabaseVersion");
                }
                catch (SqlException ex)
                {
                    string message = "ERROR:";
                    bool bError = true;
                    int i;
                    var errorMessages = new StringBuilder();
                    for (i = 0; i <= ex.Errors.Count - 1; i++)
                    {
                        SqlError sqlError = ex.Errors[i];
                        if (sqlError.Number == 2812 && sqlError.Class == 16)
                        {
                            bError = false;
                            break;
                        }
                        else
                        {
                            string filteredMessage = String.Empty;
                            switch (sqlError.Number)
                            {
                                case 17:
                                    filteredMessage = "Sql server does not exist or access denied";
                                    break;
                                case 4060:
                                    filteredMessage = "Invalid Database";
                                    break;
                                case 18456:
                                    filteredMessage = "Sql login failed";
                                    break;
                                case 1205:
                                    filteredMessage = "Sql deadlock victim";
                                    break;
                            }
                            errorMessages.Append("<b>Index #:</b> " + i + "<br/>" + "<b>Source:</b> " + sqlError.Source + "<br/>" + "<b>Class:</b> " + sqlError.Class + "<br/>" + "<b>Number:</b> " +
                                                 sqlError.Number + "<br/>" + "<b>Message:</b> " + filteredMessage + "<br/><br/>");
                        }
                    }
                    if (bError)
                    {
                        connectionString = message + errorMessages;
                    }
                }
                finally
                {
                    CBO.CloseDataReader(dr, true);
                }
            }
            else
            {
                //Invalid DbConnectionStringBuilder
            }
            return connectionString;
        }]]></body>
          </codeblock>
        </method>
        <method name="UnRegisterAssembly">
          <declaration><![CDATA[public override bool UnRegisterAssembly(int packageID, string assemblyName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3120" sc="9" el="3122" ec="10">SqlDataProvider.cs</location>
            <body hash="04fbc03d7679589016027c47d09eaf5c"><![CDATA[{
            return Convert.ToInt32(SqlHelper.ExecuteScalar(ConnectionString, DatabaseOwner + ObjectQualifier + "UnRegisterAssembly", packageID, assemblyName)) == 1;
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateAffiliate">
          <declaration><![CDATA[public override void UpdateAffiliate(int AffiliateId, DateTime StartDate, DateTime EndDate, double CPC, double CPA)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2169" sc="9" el="2171" ec="10">SqlDataProvider.cs</location>
            <body hash="0901117004ab222efba966917bea4ade"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateAffiliate", AffiliateId, GetNull(StartDate), GetNull(EndDate), CPC, CPA);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateAffiliateStats">
          <declaration><![CDATA[public override void UpdateAffiliateStats(int AffiliateId, int Clicks, int Acquisitions)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2174" sc="9" el="2176" ec="10">SqlDataProvider.cs</location>
            <body hash="994d691672810e8d94f4ff7eff0b5726"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateAffiliateStats", AffiliateId, Clicks, Acquisitions);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateAuthentication">
          <declaration><![CDATA[public override void UpdateAuthentication(int authenticationID, int packageID, string authenticationType, bool isEnabled, string settingsControlSrc, string loginControlSrc, string logoffControlSrc, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3036" sc="9" el="3047" ec="10">SqlDataProvider.cs</location>
            <body hash="4521fc84b875ac6c5e12fe0df64a0dd3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateAuthentication",
                                      authenticationID,
                                      packageID,
                                      authenticationType,
                                      isEnabled,
                                      settingsControlSrc,
                                      loginControlSrc,
                                      logoffControlSrc,
                                      LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateBanner">
          <declaration><![CDATA[public override void UpdateBanner(int BannerId, string BannerName, string ImageFile, string URL, int Impressions, double CPM, DateTime StartDate, DateTime EndDate, string UserName, int BannerTypeId, string Description, string GroupName, int Criteria, int Width, int Height)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2113" sc="9" el="2131" ec="10">SqlDataProvider.cs</location>
            <body hash="653f3179a0c0f4aada597a420429dc07"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateBanner",
                                      BannerId,
                                      BannerName,
                                      GetNull(ImageFile),
                                      GetNull(URL),
                                      Impressions,
                                      CPM,
                                      GetNull(StartDate),
                                      GetNull(EndDate),
                                      UserName,
                                      BannerTypeId,
                                      GetNull(Description),
                                      GetNull(GroupName),
                                      Criteria,
                                      Width,
                                      Height);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateBannerClickThrough">
          <declaration><![CDATA[public override void UpdateBannerClickThrough(int BannerId, int VendorId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2144" sc="9" el="2146" ec="10">SqlDataProvider.cs</location>
            <body hash="b7e4dc273282000d95c5912c17e4ef8a"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateBannerClickThrough", BannerId, VendorId);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateBannerViews">
          <declaration><![CDATA[public override void UpdateBannerViews(int BannerId, DateTime StartDate, DateTime EndDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2139" sc="9" el="2141" ec="10">SqlDataProvider.cs</location>
            <body hash="9a0830ec1d1ea562a3e160c6dc8cbecb"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateBannerViews", BannerId, GetNull(StartDate), GetNull(EndDate));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDatabaseVersion">
          <declaration><![CDATA[public override void UpdateDatabaseVersion(int Major, int Minor, int Build, string Name)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="850" sc="9" el="860" ec="10">SqlDataProvider.cs</location>
            <body hash="1cae5aec3983319c267edc0db9a8afc8"><![CDATA[{
            if ((Major >= 5 || (Major == 4 && Minor == 9 && Build > 0)))
            {
                //If the version > 4.9.0 use the new sproc, which is added in 4.9.1 script
                SqlHelper.ExecuteNonQuery(UpgradeConnectionString, DatabaseOwner + ObjectQualifier + "UpdateDatabaseVersionAndName", Major, Minor, Build, Name);
            }
            else
            {
                SqlHelper.ExecuteNonQuery(UpgradeConnectionString, DatabaseOwner + ObjectQualifier + "UpdateDatabaseVersion", Major, Minor, Build);
            }
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDesktopModule">
          <declaration><![CDATA[public override void UpdateDesktopModule(int desktopModuleId, int packageID, string moduleName, string folderName, string friendlyName, string description, string version, bool isPremium, bool isAdmin, string businessControllerClass, int supportedFeatures, string compatibleVersions, string dependencies, string permissions, int contentItemId, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1663" sc="9" el="1682" ec="10">SqlDataProvider.cs</location>
            <body hash="f45cc3df95d9f001bff212c47967cebb"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateDesktopModule",
                                      desktopModuleId,
                                      packageID,
                                      moduleName,
                                      folderName,
                                      friendlyName,
                                      GetNull(description),
                                      GetNull(version),
                                      isPremium,
                                      isAdmin,
                                      businessControllerClass,
                                      supportedFeatures,
                                      GetNull(compatibleVersions),
                                      GetNull(dependencies),
                                      GetNull(permissions),
                                      contentItemId,
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateDesktopModulePermission">
          <declaration><![CDATA[public override void UpdateDesktopModulePermission(int desktopModulePermissionID, int portalDesktopModuleID, int permissionID, int roleID, bool allowAccess, int userID, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2594" sc="9" el="2604" ec="10">SqlDataProvider.cs</location>
            <body hash="8fb948497834b1cb27e8a5f4b36237d1"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateDesktopModulePermission",
                                      desktopModulePermissionID,
                                      portalDesktopModuleID,
                                      permissionID,
                                      GetRoleNull(roleID),
                                      allowAccess,
                                      GetNull(userID),
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFile">
          <declaration><![CDATA[public override void UpdateFile(int FileId, Guid VersionGuid, string FileName, string Extension, long Size, int Width, int Height, string ContentType, string Folder, int FolderID, int lastModifiedByUserID, string hash)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1889" sc="9" el="1904" ec="10">SqlDataProvider.cs</location>
            <body hash="77a2a652f8fe495f42f39382b093afa1"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateFile",
                                      FileId,
                                      VersionGuid,
                                      FileName,
                                      Extension,
                                      Size,
                                      GetNull(Width),
                                      GetNull(Height),
                                      ContentType,
                                      Folder,
                                      FolderID,
                                      lastModifiedByUserID,
                                      hash);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFileContent">
          <declaration><![CDATA[public override void UpdateFileContent(int FileId, byte[] Content)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1917" sc="9" el="1919" ec="10">SqlDataProvider.cs</location>
            <body hash="05ac7cfbd6af69be78fd5ac4c659e13e"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateFileContent", FileId, GetNull(Content));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFileVersion">
          <declaration><![CDATA[public override void UpdateFileVersion(int FileId, Guid VersionGuid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1922" sc="9" el="1924" ec="10">SqlDataProvider.cs</location>
            <body hash="23e5738f139cf9c5fa559ab038b34805"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateFileVersion", FileId, VersionGuid);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFolder">
          <declaration><![CDATA[public override void UpdateFolder(int PortalID, Guid VersionGuid, int FolderID, string FolderPath, int StorageLocation, bool IsProtected, bool IsCached, DateTime LastUpdated, int lastModifiedByUserID, int folderMappingID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2649" sc="9" el="2662" ec="10">SqlDataProvider.cs</location>
            <body hash="9692f6c84a9b14a170c6e0f9d270624d"><![CDATA[{
            SqlHelper.ExecuteScalar(ConnectionString,
                                    DatabaseOwner + ObjectQualifier + "UpdateFolder",
                                    GetNull(PortalID),
                                    VersionGuid,
                                    FolderID,
                                    FolderPath,
                                    StorageLocation,
                                    IsProtected,
                                    IsCached,
                                    GetNull(LastUpdated),
                                    lastModifiedByUserID,
                                    folderMappingID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFolderMapping">
          <declaration><![CDATA[public override void UpdateFolderMapping(int folderMappingID, string mappingName, int priority, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3262" sc="9" el="3264" ec="10">SqlDataProvider.cs</location>
            <body hash="98d6e1fa3cae0797fbeedc442f2883a5"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateFolderMapping", folderMappingID, mappingName, priority, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFolderMappingSetting">
          <declaration><![CDATA[public override void UpdateFolderMappingSetting(int folderMappingID, string settingName, string settingValue, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3267" sc="9" el="3269" ec="10">SqlDataProvider.cs</location>
            <body hash="59bd85d2358b6abb859a65bca9255bc3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateFolderMappingsSetting", folderMappingID, settingName, settingValue, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFolderPermission">
          <declaration><![CDATA[public override void UpdateFolderPermission(int FolderPermissionID, int FolderID, int PermissionID, int roleID, bool AllowAccess, int UserID, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2718" sc="9" el="2728" ec="10">SqlDataProvider.cs</location>
            <body hash="8601787fec94ede0b04a126939ae8817"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateFolderPermission",
                                      FolderPermissionID,
                                      FolderID,
                                      PermissionID,
                                      GetRoleNull(roleID),
                                      AllowAccess,
                                      GetNull(UserID),
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateFolderVersion">
          <declaration><![CDATA[public override void UpdateFolderVersion(int FolderId, Guid VersionGuid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2670" sc="9" el="2672" ec="10">SqlDataProvider.cs</location>
            <body hash="6cb1b28d4fc3dd88e62c6b653ff59a48"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateFolderVersion", FolderId, VersionGuid);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateHostSetting">
          <declaration><![CDATA[public override void UpdateHostSetting(string SettingName, string SettingValue, bool SettingIsSecure, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="879" sc="9" el="881" ec="10">SqlDataProvider.cs</location>
            <body hash="90d24e5e62ab0028f035c6b92caec5f2"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateHostSetting", SettingName, SettingValue, SettingIsSecure, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateLanguage">
          <declaration><![CDATA[public override void UpdateLanguage(int languageID, string cultureCode, string cultureName, string fallbackCulture, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3164" sc="9" el="3166" ec="10">SqlDataProvider.cs</location>
            <body hash="8d3530e0c45d996615a9090eb63970ec"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateLanguage", languageID, cultureCode, cultureName, fallbackCulture, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateLanguagePack">
          <declaration><![CDATA[public override int UpdateLanguagePack(int languagePackID, int packageID, int languageID, int dependentPackageID, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3204" sc="9" el="3206" ec="10">SqlDataProvider.cs</location>
            <body hash="1a91912f688c29ae954cc126b25c5ec1"><![CDATA[{
            return SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateLanguagePack", languagePackID, packageID, languageID, dependentPackageID, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateListEntry">
          <declaration><![CDATA[public override void UpdateListEntry(int EntryID, string Value, string Text, string Description, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2886" sc="9" el="2888" ec="10">SqlDataProvider.cs</location>
            <body hash="725539337b454bca38950726054799e9"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateListEntry", EntryID, Value, Text, Description, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateListSortOrder">
          <declaration><![CDATA[public override void UpdateListSortOrder(int EntryID, bool MoveUp)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2906" sc="9" el="2908" ec="10">SqlDataProvider.cs</location>
            <body hash="a5603661e70faebaac96911fcd72256c"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateListSortOrder", EntryID, MoveUp);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModule">
          <declaration><![CDATA[public override void UpdateModule(int ModuleId, int ContentItemId, bool AllTabs, DateTime StartDate, DateTime EndDate, bool InheritViewPermissions, bool IsDeleted, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1387" sc="9" el="1398" ec="10">SqlDataProvider.cs</location>
            <body hash="8492026315c0fc3d9a0e5e8ece8ffdb3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateModule",
                                      ModuleId,
                                      ContentItemId,
                                      AllTabs,
                                      GetNull(StartDate),
                                      GetNull(EndDate),
                                      InheritViewPermissions,
                                      IsDeleted,
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModuleControl">
          <declaration><![CDATA[public override void UpdateModuleControl(int ModuleControlId, int ModuleDefId, string ControlKey, string ControlTitle, string ControlSrc, string IconFile, int ControlType, int ViewOrder, string HelpUrl, bool SupportsPartialRendering, bool SupportsPopUps, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1764" sc="9" el="1779" ec="10">SqlDataProvider.cs</location>
            <body hash="b2ebb1a02366b20c2dcea98f85af1222"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateModuleControl",
                                      ModuleControlId,
                                      GetNull(ModuleDefId),
                                      GetNull(ControlKey),
                                      GetNull(ControlTitle),
                                      ControlSrc,
                                      GetNull(IconFile),
                                      ControlType,
                                      GetNull(ViewOrder),
                                      GetNull(HelpUrl),
                                      SupportsPartialRendering,
                                      SupportsPopUps,
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModuleDefinition">
          <declaration><![CDATA[public override void UpdateModuleDefinition(int ModuleDefId, string FriendlyName, int DefaultCacheTime, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1718" sc="9" el="1720" ec="10">SqlDataProvider.cs</location>
            <body hash="b8574b82c4f34275b073f70ab4119be3"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateModuleDefinition", ModuleDefId, FriendlyName, DefaultCacheTime, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModuleLastContentModifiedOnDate">
          <declaration><![CDATA[public override void UpdateModuleLastContentModifiedOnDate(int moduleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1510" sc="9" el="1512" ec="10">SqlDataProvider.cs</location>
            <body hash="06a54ed3602b4b5a2af802b6060c2cac"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateModuleLastContentModifiedOnDate", moduleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModuleOrder">
          <declaration><![CDATA[public override void UpdateModuleOrder(int TabId, int ModuleId, int ModuleOrder, string PaneName)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1411" sc="9" el="1413" ec="10">SqlDataProvider.cs</location>
            <body hash="e87709d8c55044a70a959abc39aff276"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateModuleOrder", TabId, ModuleId, ModuleOrder, PaneName);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModulePermission">
          <declaration><![CDATA[public override void UpdateModulePermission(int modulePermissionID, int moduleID, int PermissionID, int roleID, bool AllowAccess, int UserID, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2486" sc="9" el="2496" ec="10">SqlDataProvider.cs</location>
            <body hash="b6990264afbe6454584a6f90a906cbb4"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateModulePermission",
                                      modulePermissionID,
                                      moduleID,
                                      PermissionID,
                                      GetRoleNull(roleID),
                                      AllowAccess,
                                      GetNull(UserID),
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateModuleSetting">
          <declaration><![CDATA[public override void UpdateModuleSetting(int ModuleId, string SettingName, string SettingValue, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1545" sc="9" el="1547" ec="10">SqlDataProvider.cs</location>
            <body hash="3080847450fdea5e7d62f8fbaf96d93a"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateModuleSetting", ModuleId, SettingName, SettingValue, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePackage">
          <declaration><![CDATA[public override void UpdatePackage(int portalID, string name, string friendlyName, string description, string type, string version, string license, string manifest, string owner, string organization, string url, string email, string releaseNotes, bool isSystemPackage, int lastModifiedByUserID, string folderName, string iconFile)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3126" sc="9" el="3146" ec="10">SqlDataProvider.cs</location>
            <body hash="78877ed26ab3efbb25356a45f5461b0a"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdatePackage",
                                      GetNull(portalID),
                                      name,
                                      friendlyName,
                                      description,
                                      type,
                                      version,
                                      license,
                                      manifest,
                                      owner,
                                      organization,
                                      url,
                                      email,
                                      releaseNotes,
                                      isSystemPackage,
                                      lastModifiedByUserID,
                                      folderName,
                                      iconFile);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePermission">
          <declaration><![CDATA[public override void UpdatePermission(int permissionID, string permissionCode, int moduleDefID, string permissionKey, string permissionName, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2426" sc="9" el="2435" ec="10">SqlDataProvider.cs</location>
            <body hash="d28a66e6164f08da2e1d791da182133d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdatePermission",
                                      permissionID,
                                      permissionCode,
                                      moduleDefID,
                                      permissionKey,
                                      permissionName,
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalAlias">
          <declaration><![CDATA[public override void UpdatePortalAlias(string PortalAlias, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2921" sc="9" el="2923" ec="10">SqlDataProvider.cs</location>
            <body hash="4c457e96f049df8227d175f9634bfd74"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdatePortalAliasOnInstall", PortalAlias, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalAliasInfo">
          <declaration><![CDATA[public override void UpdatePortalAliasInfo(int PortalAliasID, int PortalID, string HTTPAlias, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2926" sc="9" el="2928" ec="10">SqlDataProvider.cs</location>
            <body hash="d5e9773cbaa78fc26475fced9e0e9cb6"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdatePortalAlias", PortalAliasID, PortalID, HTTPAlias, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalDefaultLanguage">
          <declaration><![CDATA[public override void UpdatePortalDefaultLanguage(int portalID, string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3215" sc="9" el="3217" ec="10">SqlDataProvider.cs</location>
            <body hash="6faa19035e2fff92954ee5f8af24a36d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdatePortalDefaultLanguage", portalID, CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalInfo">
          <declaration><![CDATA[public override void UpdatePortalInfo(int portalId, int portalGroupId, string portalName, string logoFile, string footerText, DateTime expiryDate, int userRegistration, int bannerAdvertising, string currency, int administratorId, double hostFee, double hostSpace, int pageQuota, int userQuota, string paymentProcessor, string processorUserId, string processorPassword, string description, string keyWords, string backgroundFile, int siteLogHistory, int splashTabId, int homeTabId, int loginTabId, int registerTabId, int userTabId, int searchTabId, string defaultLanguage, string homeDirectory, int lastModifiedByUserID, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1018" sc="9" el="1052" ec="10">SqlDataProvider.cs</location>
            <body hash="f506cb6c2fc37dde073b71e0c23872f0"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdatePortalInfo",
                                      portalId,
                                      portalGroupId,
                                      portalName,
                                      GetNull(logoFile),
                                      GetNull(footerText),
                                      GetNull(expiryDate),
                                      userRegistration,
                                      bannerAdvertising,
                                      currency,
                                      GetNull(administratorId),
                                      hostFee,
                                      hostSpace,
                                      pageQuota,
                                      userQuota,
                                      GetNull(paymentProcessor),
                                      GetNull(processorUserId),
                                      GetNull(processorPassword),
                                      GetNull(description),
                                      GetNull(keyWords),
                                      GetNull(backgroundFile),
                                      GetNull(siteLogHistory),
                                      GetNull(splashTabId),
                                      GetNull(homeTabId),
                                      GetNull(loginTabId),
                                      GetNull(registerTabId),
                                      GetNull(userTabId),
                                      GetNull(searchTabId),
                                      GetNull(defaultLanguage),
                                      homeDirectory,
                                      lastModifiedByUserID,
                                      cultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalLanguage">
          <declaration><![CDATA[public override void UpdatePortalLanguage(int portalID, int languageID, bool IsPublished, int UpdatedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="3184" sc="9" el="3186" ec="10">SqlDataProvider.cs</location>
            <body hash="4c2e785b9f64fff93b3380c5a2de1e8e"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdatePortalLanguage", portalID, languageID, IsPublished, UpdatedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalSetting">
          <declaration><![CDATA[public override void UpdatePortalSetting(int PortalId, string SettingName, string SettingValue, int UserID, string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1055" sc="9" el="1057" ec="10">SqlDataProvider.cs</location>
            <body hash="d21d740669d60c6b0fa8152f685a43a7"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdatePortalSetting", PortalId, SettingName, SettingValue, UserID, CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePortalSetup">
          <declaration><![CDATA[public override void UpdatePortalSetup(int PortalId, int AdministratorId, int AdministratorRoleId, int RegisteredRoleId, int SplashTabId, int HomeTabId, int LoginTabId, int RegisterTabId, int UserTabId, int SearchTabId, int AdminTabId, string CultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1061" sc="9" el="1076" ec="10">SqlDataProvider.cs</location>
            <body hash="70c1b874bb2bb29cdfe75f7d66fd7cb8"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdatePortalSetup",
                                      PortalId,
                                      AdministratorId,
                                      AdministratorRoleId,
                                      RegisteredRoleId,
                                      SplashTabId,
                                      HomeTabId,
                                      LoginTabId,
                                      RegisterTabId,
                                      UserTabId,
                                      SearchTabId,
                                      AdminTabId,
                                      CultureCode);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateProfile">
          <declaration><![CDATA[public override void UpdateProfile(int UserId, int PortalId, string ProfileData)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2239" sc="9" el="2241" ec="10">SqlDataProvider.cs</location>
            <body hash="06f5d8d18385f065eac9872aee6b1e12"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateProfile", UserId, PortalId, ProfileData);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdatePropertyDefinition">
          <declaration><![CDATA[public override void UpdatePropertyDefinition(int PropertyDefinitionId, int DataType, string DefaultValue, string PropertyCategory, string PropertyName, bool ReadOnly, bool Required, string ValidationExpression, int ViewOrder, bool Visible, int Length, int DefaultVisibility, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2306" sc="9" el="2322" ec="10">SqlDataProvider.cs</location>
            <body hash="04e08d4f6adeb35bc1ef388a5d452a91"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdatePropertyDefinition",
                                      PropertyDefinitionId,
                                      DataType,
                                      DefaultValue,
                                      PropertyCategory,
                                      PropertyName,
                                      ReadOnly,
                                      Required,
                                      ValidationExpression,
                                      ViewOrder,
                                      Visible,
                                      Length,
                                      DefaultVisibility,
                                      LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSearchItem">
          <declaration><![CDATA[public override void UpdateSearchItem(int SearchItemId, string Title, string Description, int Author, DateTime PubDate, int ModuleId, string Key, string Guid, int HitCount, int ImageFileId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2826" sc="9" el="2839" ec="10">SqlDataProvider.cs</location>
            <body hash="4772d43bec95e212844dae380e7b8384"><![CDATA[{
            SqlHelper.ExecuteScalar(ConnectionString,
                                    DatabaseOwner + ObjectQualifier + "UpdateSearchItem",
                                    SearchItemId,
                                    Title,
                                    Description,
                                    GetNull(Author),
                                    GetNull(PubDate),
                                    ModuleId,
                                    Key,
                                    Guid,
                                    HitCount,
                                    ImageFileId);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateServer">
          <declaration><![CDATA[public override void UpdateServer(int ServerId, string Url, bool Enabled)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="894" sc="9" el="896" ec="10">SqlDataProvider.cs</location>
            <body hash="ca60aea93796b6dfda237242d96dcbd0"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateServer", ServerId, Url, Enabled);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateServerActivity">
          <declaration><![CDATA[public override void UpdateServerActivity(string ServerName, string IISAppName, DateTime CreatedDate, DateTime LastActivityDate)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="904" sc="9" el="906" ec="10">SqlDataProvider.cs</location>
            <body hash="1eace3686478d83570e03daca056d2ac"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateServerActivity", ServerName, IISAppName, CreatedDate, LastActivityDate);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSkin">
          <declaration><![CDATA[public override void UpdateSkin(int skinID, string skinSrc)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2214" sc="9" el="2216" ec="10">SqlDataProvider.cs</location>
            <body hash="1d73ececc9beb672bdf431ae5d738ffa"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateSkin", skinID, skinSrc);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSkinControl">
          <declaration><![CDATA[public override void UpdateSkinControl(int skinControlID, int packageID, string ControlKey, string ControlSrc, bool SupportsPartialRendering, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1824" sc="9" el="1833" ec="10">SqlDataProvider.cs</location>
            <body hash="6419409071102c80052110247ec72a6e"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateSkinControl",
                                      skinControlID,
                                      GetNull(packageID),
                                      GetNull(ControlKey),
                                      ControlSrc,
                                      SupportsPartialRendering,
                                      LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateSkinPackage">
          <declaration><![CDATA[public override void UpdateSkinPackage(int skinPackageID, int packageID, int portalID, string skinName, string skinType, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2219" sc="9" el="2221" ec="10">SqlDataProvider.cs</location>
            <body hash="8249871dccaf3ec1e757be9a50950c12"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateSkinPackage", skinPackageID, packageID, GetNull(portalID), skinName, skinType, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTab">
          <declaration><![CDATA[public override void UpdateTab(int tabId, int contentItemId, int portalId, Guid versionGuid, Guid defaultLanguageGuid, Guid localizedVersionGuid, string tabName, bool isVisible, bool disableLink, int parentId, string iconFile, string iconFileLarge, string title, string description, string keyWords, bool isDeleted, string url, string skinSrc, string containerSrc, DateTime startDate, DateTime endDate, int refreshInterval, string pageHeadText, bool isSecure, bool permanentRedirect, float siteMapPriority, int lastModifiedByuserID, string cultureCode)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1215" sc="9" el="1246" ec="10">SqlDataProvider.cs</location>
            <body hash="f04de41fb359378441d102b2274e1d35"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateTab",
                                      tabId,
                                      contentItemId,
                                      GetNull(portalId),
                                      versionGuid,
                                      GetNull(defaultLanguageGuid),
                                      localizedVersionGuid,
                                      tabName,
                                      isVisible,
                                      disableLink,
                                      GetNull(parentId),
                                      iconFile,
                                      iconFileLarge,
                                      title,
                                      description,
                                      keyWords,
                                      isDeleted,
                                      url,
                                      GetNull(skinSrc),
                                      GetNull(containerSrc),
                                      GetNull(startDate),
                                      GetNull(endDate),
                                      GetNull(refreshInterval),
                                      GetNull(pageHeadText),
                                      isSecure,
                                      permanentRedirect,
                                      siteMapPriority,
                                      lastModifiedByuserID,
                                      GetNull(cultureCode));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabModule">
          <declaration><![CDATA[public override void UpdateTabModule(int TabModuleId, int TabId, int ModuleId, string ModuleTitle, string Header, string Footer, int ModuleOrder, string PaneName, int CacheTime, string CacheMethod, string Alignment, string Color, string Border, string IconFile, int Visibility, string ContainerSrc, bool DisplayTitle, bool DisplayPrint, bool DisplaySyndicate, bool IsWebSlice, string WebSliceTitle, DateTime WebSliceExpiryDate, int WebSliceTTL, Guid VersionGuid, Guid DefaultLanguageGuid, Guid LocalizedVersionGuid, string CultureCode, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1471" sc="9" el="1502" ec="10">SqlDataProvider.cs</location>
            <body hash="b180576236f6da5284c6c16e8145f1df"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateTabModule",
                                      TabModuleId,
                                      TabId,
                                      ModuleId,
                                      ModuleTitle,
                                      GetNull(Header),
                                      GetNull(Footer),
                                      ModuleOrder,
                                      PaneName,
                                      CacheTime,
                                      GetNull(CacheMethod),
                                      GetNull(Alignment),
                                      GetNull(Color),
                                      GetNull(Border),
                                      GetNull(IconFile),
                                      Visibility,
                                      GetNull(ContainerSrc),
                                      DisplayTitle,
                                      DisplayPrint,
                                      DisplaySyndicate,
                                      IsWebSlice,
                                      WebSliceTitle,
                                      GetNull(WebSliceExpiryDate),
                                      WebSliceTTL,
                                      VersionGuid,
                                      GetNull(DefaultLanguageGuid),
                                      LocalizedVersionGuid,
                                      CultureCode,
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabModuleSetting">
          <declaration><![CDATA[public override void UpdateTabModuleSetting(int TabModuleId, string SettingName, string SettingValue, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1605" sc="9" el="1607" ec="10">SqlDataProvider.cs</location>
            <body hash="3dcc903cc4dc2833943cc29ccf7ed0d5"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabModuleSetting", TabModuleId, SettingName, SettingValue, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabModuleTranslationStatus">
          <declaration><![CDATA[public override void UpdateTabModuleTranslationStatus(int TabModuleId, Guid LocalizedVersionGuid, int LastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1505" sc="9" el="1507" ec="10">SqlDataProvider.cs</location>
            <body hash="ac7a86de9867e67115ad19e855c63a81"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabModuleTranslationStatus", TabModuleId, LocalizedVersionGuid, LastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabModuleVersion">
          <declaration><![CDATA[public override void UpdateTabModuleVersion(int TabModuleId, Guid VersionGuid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1515" sc="9" el="1517" ec="10">SqlDataProvider.cs</location>
            <body hash="6838593559ea361de8c1191465003f18"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabModuleVersion", TabModuleId, VersionGuid);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabModuleVersionByModule">
          <declaration><![CDATA[public override void UpdateTabModuleVersionByModule(int ModuleId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1520" sc="9" el="1522" ec="10">SqlDataProvider.cs</location>
            <body hash="a789475dd2ed18b498fcc57b88331338"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabModuleVersionByModule", ModuleId);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabOrder">
          <declaration><![CDATA[public override void UpdateTabOrder(int tabId, int tabOrder, int parentId, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1254" sc="9" el="1256" ec="10">SqlDataProvider.cs</location>
            <body hash="465d6ac3899b12b89ccec8437badd176"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabOrder", tabId, tabOrder, GetNull(parentId), lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabPermission">
          <declaration><![CDATA[public override void UpdateTabPermission(int TabPermissionID, int TabID, int PermissionID, int roleID, bool AllowAccess, int UserID, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2537" sc="9" el="2547" ec="10">SqlDataProvider.cs</location>
            <body hash="dff37d68b8268ecdb1f3bf14c5c2eab5"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateTabPermission",
                                      TabPermissionID,
                                      TabID,
                                      PermissionID,
                                      GetRoleNull(roleID),
                                      AllowAccess,
                                      GetNull(UserID),
                                      lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabSetting">
          <declaration><![CDATA[public override void UpdateTabSetting(int TabId, string SettingName, string SettingValue, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1570" sc="9" el="1572" ec="10">SqlDataProvider.cs</location>
            <body hash="13fe6ce039027959fca8966a974229c7"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabSetting", TabId, SettingName, SettingValue, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabTranslationStatus">
          <declaration><![CDATA[public override void UpdateTabTranslationStatus(int tabId, Guid localizedVersionGuid, int lastModifiedByUserID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1249" sc="9" el="1251" ec="10">SqlDataProvider.cs</location>
            <body hash="cc5f7e80799df5459ac630e0fa51fe86"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabTranslationStatus", tabId, localizedVersionGuid, lastModifiedByUserID);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateTabVersion">
          <declaration><![CDATA[public override void UpdateTabVersion(int tabId, Guid versionGuid)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1259" sc="9" el="1261" ec="10">SqlDataProvider.cs</location>
            <body hash="02a74f125b6edbfaa3e3df9caa26448d"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateTabVersion", tabId, versionGuid);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUrlTracking">
          <declaration><![CDATA[public override void UpdateUrlTracking(int PortalID, string Url, bool LogActivity, bool TrackClicks, int ModuleID, bool NewWindow)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2355" sc="9" el="2357" ec="10">SqlDataProvider.cs</location>
            <body hash="c8c54d12a906f2ac986a1ee3eef28784"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateUrlTracking", PortalID, Url, LogActivity, TrackClicks, GetNull(ModuleID), NewWindow);
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateUrlTrackingStats">
          <declaration><![CDATA[public override void UpdateUrlTrackingStats(int PortalID, string Url, int ModuleID)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2365" sc="9" el="2367" ec="10">SqlDataProvider.cs</location>
            <body hash="b4c379c7394923fa4dbec36ac8fde114"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString, DatabaseOwner + ObjectQualifier + "UpdateUrlTrackingStats", PortalID, Url, GetNull(ModuleID));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpdateVendor">
          <declaration><![CDATA[public override void UpdateVendor(int VendorId, string VendorName, string Unit, string Street, string City, string Region, string Country, string PostalCode, string Telephone, string Fax, string Cell, string Email, string Website, string FirstName, string LastName, string UserName, string LogoFile, string KeyWords, string Authorized)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="2026" sc="9" el="2048" ec="10">SqlDataProvider.cs</location>
            <body hash="0cff3298c460238b5cb6c3a091a5c0ba"><![CDATA[{
            SqlHelper.ExecuteNonQuery(ConnectionString,
                                      DatabaseOwner + ObjectQualifier + "UpdateVendor",
                                      VendorId,
                                      VendorName,
                                      Unit,
                                      Street,
                                      City,
                                      Region,
                                      Country,
                                      PostalCode,
                                      Telephone,
                                      Fax,
                                      Cell,
                                      Email,
                                      Website,
                                      FirstName,
                                      LastName,
                                      UserName,
                                      LogoFile,
                                      KeyWords,
                                      bool.Parse(Authorized));
        }]]></body>
          </codeblock>
        </method>
        <method name="UpgradeDatabaseSchema">
          <declaration><![CDATA[public override void UpgradeDatabaseSchema(int Major, int Minor, int Build)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="845" sc="9" el="847" ec="10">SqlDataProvider.cs</location>
            <body hash="443ccfaa57169868943ffb4898a2ae31"><![CDATA[{
            //not necessary for SQL Server - use Transact-SQL scripts
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyPortal">
          <declaration><![CDATA[public override IDataReader VerifyPortal(int PortalId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1079" sc="9" el="1081" ec="10">SqlDataProvider.cs</location>
            <body hash="d2433f7e58e19d290ddbdbbeefbf6a16"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "VerifyPortal", PortalId);
        }]]></body>
          </codeblock>
        </method>
        <method name="VerifyPortalTab">
          <declaration><![CDATA[public override IDataReader VerifyPortalTab(int PortalId, int TabId)]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="1084" sc="9" el="1086" ec="10">SqlDataProvider.cs</location>
            <body hash="1303aed86bf3504dab5b42b1aa00799f"><![CDATA[{
            return SqlHelper.ExecuteReader(ConnectionString, DatabaseOwner + ObjectQualifier + "VerifyPortalTab", PortalId, TabId);
        }]]></body>
          </codeblock>
        </method>
      </methods>
      <fields>
        <field name="_connectionString">
          <declaration><![CDATA[private readonly string _connectionString;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_coreConnectionString">
          <declaration><![CDATA[private readonly string _coreConnectionString;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_databaseOwner">
          <declaration><![CDATA[private readonly string _databaseOwner;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_isConnectionValid">
          <declaration><![CDATA[private readonly bool _isConnectionValid;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_objectQualifier">
          <declaration><![CDATA[private readonly string _objectQualifier;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_providerName">
          <declaration><![CDATA[private readonly string _providerName;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_providerPath">
          <declaration><![CDATA[private readonly string _providerPath;]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_scriptDelimiterRegex">
          <declaration><![CDATA[private string _scriptDelimiterRegex = "(?<=(?:[^\\w]+|^))GO(?=(?: |\\t)*?(?:\\r?\\n|$))";]]></declaration>
          <documentation>
          </documentation>
        </field>
        <field name="_upgradeConnectionString">
          <declaration><![CDATA[private readonly string _upgradeConnectionString;]]></declaration>
          <documentation>
          </documentation>
        </field>
      </fields>
      <properties>
        <property name="ConnectionString">
          <declaration><![CDATA[public override string ConnectionString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="107" sc="13" el="109" ec="14">SqlDataProvider.cs</location>
            <body hash="49f65acf05d3c86c0c946c0e7c18ee79"><![CDATA[{
                return _coreConnectionString;
            }]]></body>
          </codeblock>
        </property>
        <property name="DatabaseOwner">
          <declaration><![CDATA[public override string DatabaseOwner]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="115" sc="13" el="117" ec="14">SqlDataProvider.cs</location>
            <body hash="595cb59964d302a09c78cab7a38fb3da"><![CDATA[{
                return _databaseOwner;
            }]]></body>
          </codeblock>
        </property>
        <property name="IsConnectionValid">
          <declaration><![CDATA[public bool IsConnectionValid]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="163" sc="13" el="165" ec="14">SqlDataProvider.cs</location>
            <body hash="8d21e05c51de5d3e1072439090d8ff91"><![CDATA[{
                return _isConnectionValid;
            }]]></body>
          </codeblock>
        </property>
        <property name="ObjectQualifier">
          <declaration><![CDATA[public override string ObjectQualifier]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="123" sc="13" el="125" ec="14">SqlDataProvider.cs</location>
            <body hash="32ddc53c6939ab987d12c86e153b8389"><![CDATA[{
                return _objectQualifier;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProviderName">
          <declaration><![CDATA[public override string ProviderName]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="131" sc="13" el="133" ec="14">SqlDataProvider.cs</location>
            <body hash="7e5cab586d4797e1771ea5b6a64ab0aa"><![CDATA[{
                return _providerName;
            }]]></body>
          </codeblock>
        </property>
        <property name="ProviderPath">
          <declaration><![CDATA[public string ProviderPath]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="147" sc="13" el="149" ec="14">SqlDataProvider.cs</location>
            <body hash="e34c03da51a7126f97f34ae4218642d2"><![CDATA[{
                return _providerPath;
            }]]></body>
          </codeblock>
        </property>
        <property name="Settings">
          <declaration><![CDATA[public override Dictionary<string, string> Settings]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="139" sc="13" el="141" ec="14">SqlDataProvider.cs</location>
            <body hash="4efca64431ccf6a1925ca67265f8cf29"><![CDATA[{
                return ComponentFactory.GetComponentSettings<SqlDataProvider>() as Dictionary<string, string>;
            }]]></body>
          </codeblock>
        </property>
        <property name="SqlDelimiterRegex">
          <declaration><![CDATA[protected Regex SqlDelimiterRegex]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="171" sc="13" el="179" ec="14">SqlDataProvider.cs</location>
            <body hash="ff63b36a1fd043be2e6be2699fab890f"><![CDATA[{
                var objRegex = (Regex)DataCache.GetCache("SQLDelimiterRegex");
                if (objRegex == null)
                {
                    objRegex = new Regex(_scriptDelimiterRegex, RegexOptions.Compiled | RegexOptions.IgnoreCase | RegexOptions.Multiline);
                    DataCache.SetCache("SQLDelimiterRegex", objRegex);
                }
                return objRegex;
            }]]></body>
          </codeblock>
        </property>
        <property name="UpgradeConnectionString">
          <declaration><![CDATA[public string UpgradeConnectionString]]></declaration>
          <documentation>
          </documentation>
          <codeblock>
            <location sl="155" sc="13" el="157" ec="14">SqlDataProvider.cs</location>
            <body hash="0d18886e9c0750fcf973f7ad9398e83a"><![CDATA[{
                return _upgradeConnectionString;
            }]]></body>
          </codeblock>
        </property>
      </properties>
      <events>
      </events>
    </class>
  </namespace>
</root>